
import { Entity } from "playcanvas";
import { createScript } from "../utils/createScriptDecorator";
import mustFindByName from "../utils/mustFindByName";
import { ScriptTypeBase } from "../types/ScriptTypeBase";
import { randomBounded, randomInt } from "../utils/randoms";

const board =
[[3,3,3,3,3,3,3,3,3],
[3,4,4,4,4,4,4,4,3],
[3,4,2,2,2,2,2,4,3],
[3,4,2,1,1,1,2,4,3],
[3,4,2,1,1,1,2,4,3],
[3,4,2,2,2,2,2,4,3],
[3,4,4,4,4,4,4,4,3],
[3,3,3,3,3,3,3,3,3],
[2,2,2,2,2,2,2,2,2],
[2,1,1,4,4,4,1,1,2],
[2,1,1,4,5,4,1,1,2],
[2,1,1,4,4,4,1,1,2],
[2,2,2,2,2,2,2,2,2]]
// [[3,3,3,3,3,3,3,3,3],
// [3,3,3,3,3,3,3,3,3],
// [3,3,2,2,2,2,2,3,3],
// [3,3,2,5,5,5,2,3,3],
// [3,3,2,5,4,5,2,3,3],
// [3,3,2,5,5,5,2,3,3],
// [3,3,2,1,1,1,2,3,3],
// [3,3,2,1,4,1,2,3,3],
// [3,3,2,1,1,1,2,3,3],
// [3,3,2,2,2,2,2,3,3],
// [3,3,3,3,3,3,3,3,3],
// [3,3,3,3,3,3,3,3,3]]


// cool with lots of lines
// [[2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
// [2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3],
// [3,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,2],
// [2,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3],
// [3,1,5,1,4,4,4,4,4,4,4,4,4,4,4,4,2,2],
// [2,1,5,1,4,1,3,3,3,3,3,3,3,3,3,3,3,3],
// [3,1,5,1,4,1,2,2,2,2,2,2,2,2,2,2,2,2],
// [2,1,5,1,4,1,3,1,1,1,1,1,1,1,1,1,3,3],
// [3,1,5,1,4,1,2,1,5,5,5,5,5,5,5,5,2,2],
// [2,1,5,1,4,1,3,1,5,1,3,3,3,3,3,3,3,3],
// [3,1,5,1,4,1,2,1,5,1,2,2,2,2,2,2,2,2],
// [2,1,5,1,4,1,3,1,5,1,3,1,1,1,1,1,3,3],
// [3,1,5,1,4,1,2,1,5,1,2,1,4,4,4,4,2,2],
// [2,1,5,1,4,1,3,1,5,1,3,1,4,1,3,3,3,3],
// [3,1,5,1,4,1,2,1,5,1,2,1,4,1,2,2,2,2],
// [2,1,5,1,4,1,3,1,5,1,3,1,4,1,3,1,3,3],
// [3,1,5,1,4,1,2,1,5,1,2,1,4,1,2,1,2,2],
// [2,1,1,1,4,1,3,1,5,1,3,1,4,1,3,1,3,3],
// [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]]

// cools horeline
// [[3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2],
// [3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2],  
// [3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2],  
// [3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2],  
// [3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2],  
// [3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2],  
// [3,3,3,3,3,3,2,2,2,2,2,2,2,2,5,5,5,5],  
// [3,3,3,3,3,3,2,2,2,2,2,2,2,5,5,5,5,5],  
// [3,3,3,3,3,3,2,2,2,2,2,2,5,5,5,5,5,5],  
// [3,3,3,3,3,3,2,2,2,2,2,5,5,5,4,4,4,4],  
// [3,3,3,3,3,3,2,2,2,2,5,5,4,4,4,4,4,4],  
// [3,3,3,3,3,3,2,2,2,5,5,4,4,4,4,4,4,4],  
// [3,3,3,3,3,3,2,2,5,5,4,4,4,4,4,4,4,4],  
// [3,3,3,3,3,3,2,5,5,4,4,4,4,4,4,4,4,4],  
// [3,3,3,3,3,3,5,5,4,4,4,4,4,4,4,4,4,4],  
// [3,3,3,3,3,5,5,4,4,4,4,4,4,4,4,4,4,4],  
// [3,3,3,3,5,5,4,4,4,4,4,4,4,4,4,4,4,4],  
// [3,3,3,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4]]  

// [[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],
// [4,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,4],
// [4,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,4],
// [4,1,2,5,5,5,5,5,5,5,5,5,5,5,5,2,1,4],
// [4,1,2,5,1,1,1,1,1,1,3,3,3,3,5,2,1,4],
// [4,1,2,5,1,2,2,2,2,2,2,2,2,2,5,2,1,4],
// [4,1,2,5,1,2,5,5,5,5,5,5,5,2,5,2,1,4],
// [4,1,2,5,1,2,5,1,1,1,1,1,5,2,5,2,1,4],
// [4,1,2,5,1,2,5,1,2,2,2,1,5,2,5,2,1,4],
// [4,1,2,5,1,2,5,1,2,5,2,1,5,2,5,2,1,4],
// [4,1,2,5,1,2,5,1,2,5,2,1,5,2,5,2,1,4],
// [4,1,2,5,1,2,5,1,2,2,2,1,5,2,5,2,1,4],
// [4,1,2,5,1,2,5,1,1,1,1,1,5,2,5,2,1,4],
// [4,1,2,5,1,2,2,2,2,2,2,2,2,2,5,2,1,4],
// [4,1,2,5,1,1,1,1,1,1,3,3,3,3,5,2,1,4],
// [4,1,2,5,5,5,5,5,5,5,5,5,5,5,5,2,1,4],
// [4,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,4],
// [4,1,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,4],
// [4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]]

// this one is bad because it is surrounded
// [[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
// [3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3],
// [3,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,3],
// [3,2,4,1,1,1,1,1,1,1,1,1,1,1,1,4,2,3],
// [3,2,4,1,5,5,5,5,5,5,5,5,5,5,1,4,2,3],
// [3,2,4,1,5,1,1,1,1,1,1,1,1,5,1,4,2,3],
// [3,2,4,1,5,1,2,2,2,2,2,2,1,5,1,4,2,3],
// [3,2,4,1,5,1,2,3,3,3,3,2,1,5,1,4,2,3],
// [3,2,4,1,5,1,2,3,4,4,3,2,1,5,1,4,2,3],
// [3,2,4,1,5,1,2,3,4,4,3,2,1,5,1,4,2,3],
// [3,2,4,1,5,1,2,3,3,3,3,2,1,5,1,4,2,3],
// [3,2,4,1,5,1,2,2,2,2,2,2,1,5,1,4,2,3],
// [3,2,4,1,5,1,1,1,1,1,1,1,1,5,1,4,2,3],
// [3,2,4,1,5,5,5,5,5,5,5,5,5,5,1,4,2,3],
// [3,2,4,1,1,1,1,1,1,1,1,1,1,1,1,4,2,3],
// [3,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,3],
// [3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3],
// [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]]

// [[2,1,1,1,3,1,1,1,2],
// [3,3,3,3,1,3,3,3,3],
// [2,2,2,2,1,2,2,2,2],
// [3,3,3,3,3,3,3,3,3],
// [4,4,4,4,4,4,4,4,4],
// [3,3,1,1,1,1,1,4,4],
// [2,2,2,2,2,2,2,4,4],
// [1,1,1,1,1,1,3,3,3],
// [2,2,2,2,2,3,3,3,3]]
// [[2,3,2,1,2,3,2,1,2],
// [1,5,1,2,1,5,1,2,1],
// [2,3,2,1,2,3,2,1,2],
// [1,4,1,3,1,4,1,3,1],
// [2,3,2,1,2,3,2,1,2],
// [1,5,1,2,1,5,1,2,1],
// [2,3,2,1,2,3,2,1,2],
// [1,4,1,3,1,4,1,3,1],
// [2,3,2,1,2,3,2,1,2]]


enum TileType {
  grass = 1,
  dirt = 2,
  trees = 3,
  water = 4,
  stone = 5,
}

const tileTypeToEnglish = (tileType: TileType) => {
  switch (tileType) {
    case TileType.grass:
      return "Grass"
    case TileType.dirt:
      return "Dirt"
    case TileType.trees:
      return "Tree"
    case TileType.water:
      return "Water"
    case TileType.stone:
      return "Stone"
  }
}

@createScript("gameBoard")
class GameBoard extends ScriptTypeBase {

  initialize() {
    const boardElement = mustFindByName(this.app.root, "Board")
    const tileHolder = mustFindByName(boardElement, "Tiles")
    const templates = mustFindByName(this.app.root, "Templates")
    const tileEntity = mustFindByName(templates, "Tile") as Entity
    // loop through board and create tiles based on the board array
    for (let i = 0; i < board.length; i++) {
      for (let j = 0; j < board[i].length; j++) {
        const tile = tileEntity.clone()
        tile.name = `Tile-${i}-${j}`
        tile.enabled = true
        tile.setLocalPosition(j * 1.03, randomBounded(0.01), i * 1.03)
        tileHolder.addChild(tile)
        mustFindByName(tile, tileTypeToEnglish(board[i][j])).enabled = true
      }
    }

    const getRandomPlaceableTile = ():Entity => {
      const columnLength = board.length
      const rowLength = board[0].length

      const y = randomInt(columnLength)
      const x = randomInt(rowLength)

      const randomTile = board[y][x]
      if ([TileType.water, TileType.stone].includes(randomTile)) {
        return getRandomPlaceableTile()
      }

      return tileHolder.findByName(`Tile-${y}-${x}`) as Entity
    }

    // place 16 instances of a model templated called "Character" on random tiles that are not water or stone.
    const characterEntity = mustFindByName(templates, "Character") as Entity
    for (let i = 0; i < 8; i++) {
      const character = characterEntity.clone()
      character.enabled = true
      const randomTile = getRandomPlaceableTile()
      character.setLocalPosition(randomTile.getLocalPosition())
      boardElement.addChild(character)
    }

  }
}

export default GameBoard
