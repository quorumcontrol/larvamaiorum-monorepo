import { fetchBoard } from "../ai/board"
import { TileType } from "../rooms/schema/PickleChessState"
import { randomInt } from "./utils/randoms"

export type RawBoard = number[][]

const pregeneratedBoards: RawBoard[] = [
  [[1, 3, 3, 5, 5, 5, 5, 5, 5], [1, 3, 3, 3, 3, 5, 5, 5, 5], [1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 3, 3, 3, 3, 1, 1, 1, 1], [1, 1, 1, 4, 4, 2, 2, 2, 2], [1, 3, 3, 4, 4, 2, 2, 2, 2], [1, 3, 3, 4, 4, 1, 1, 1, 1], [1, 1, 1, 4, 4, 2, 2, 2, 2], [1, 3, 3, 3, 3, 2, 2, 2, 2], [1, 3, 3, 3, 3, 1, 1, 1, 1], [2, 1, 1, 1, 1, 2, 2, 2, 2]],
  [[2, 3, 4, 3, 2, 1, 1, 2, 3], [1, 4, 3, 4, 1, 2, 3, 2, 1], [2, 3, 4, 3, 2, 4, 3, 2, 1], [1, 2, 3, 4, 1, 4, 3, 4, 3], [3, 1, 2, 3, 4, 3, 4, 3, 2], [2, 1, 2, 3, 2, 1, 2, 3, 4], [3, 2, 1, 4, 3, 2, 1, 4, 3], [1, 2, 3, 2, 1, 2, 3, 2, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3], [2, 3, 4, 3, 2, 3, 4, 3, 2], [1, 2, 3, 4, 1, 2, 3, 4, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4], [3, 4, 3, 2, 1, 2, 3, 4, 3], [2, 1, 2, 3, 4, 3, 2, 1, 2], [1, 4, 3, 2, 1, 4, 3, 2, 1]],
  [[2, 3, 4, 3, 1, 3, 2, 3, 2], [3, 2, 3, 1, 3, 2, 3, 1, 3], [1, 3, 2, 3, 1, 3, 2, 3, 2], [2, 3, 1, 3, 2, 3, 1, 3, 2], [1, 3, 2, 3, 1, 3, 2, 3, 2], [2, 3, 1, 3, 2, 3, 1, 3, 2], [3, 2, 3, 1, 3, 2, 3, 1, 3], [1, 3, 2, 3, 4, 3, 2, 3, 1], [3, 1, 3, 2, 3, 1, 3, 2, 3], [2, 3, 2, 3, 1, 3, 2, 3, 2], [3, 1, 3, 2, 3, 1, 3, 2, 3], [1, 3, 2, 3, 1, 3, 2, 3, 2], [2, 3, 1, 3, 2, 3, 1, 3, 2]],
  [[2, 3, 4, 3, 2, 1, 1, 2, 3], [1, 4, 3, 4, 1, 2, 3, 2, 1], [2, 3, 4, 3, 2, 4, 3, 2, 1], [1, 2, 3, 4, 1, 4, 3, 4, 3], [3, 1, 2, 3, 4, 3, 4, 3, 2], [2, 1, 2, 3, 2, 1, 2, 3, 4], [3, 2, 1, 4, 3, 2, 1, 4, 3], [1, 2, 3, 2, 1, 2, 3, 2, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3], [2, 3, 4, 3, 2, 3, 4, 3, 2], [1, 2, 3, 4, 1, 2, 3, 4, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4], [3, 4, 3, 2, 1, 2, 3, 4, 3], [2, 1, 2, 3, 4, 3, 2, 1, 2], [1, 4, 3, 2, 1, 4, 3, 2, 1]],
  [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3], [3, 1, 5, 5, 1, 2, 5, 5, 2, 2, 3], [3, 1, 5, 5, 1, 2, 5, 5, 2, 2, 3], [3, 1, 5, 5, 1, 2, 5, 5, 2, 2, 3], [3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3], [3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3], [3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3], [3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3], [3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3], [3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]],
  [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3], [3, 1, 5, 5, 1, 2, 5, 5, 2, 2, 3], [3, 1, 5, 5, 1, 2, 5, 5, 2, 2, 3], [3, 1, 5, 5, 1, 2, 5, 5, 2, 2, 3], [3, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3], [3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3], [3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3], [3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3], [3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3], [3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]],
  [[2, 3, 2, 3, 2, 3, 2, 3, 2], [2, 4, 2, 4, 2, 4, 2, 4, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2], [3, 4, 3, 4, 3, 4, 3, 4, 3], [3, 5, 3, 5, 3, 4, 3, 5, 3], [2, 4, 2, 4, 2, 5, 2, 4, 2], [3, 5, 3, 5, 3, 5, 3, 5, 3], [2, 4, 2, 4, 2, 4, 2, 4, 2], [2, 3, 2, 3, 2, 3, 2, 3, 2], [1, 1, 1, 1, 1, 1, 1, 1, 1], [3, 3, 3, 3, 3, 3, 3, 3, 3]],
  [[2, 3, 4, 3, 2, 1, 1, 2, 3], [1, 4, 3, 4, 1, 2, 3, 2, 1], [2, 3, 4, 3, 2, 4, 3, 2, 1], [1, 2, 3, 4, 1, 4, 3, 4, 3], [3, 1, 2, 3, 4, 3, 4, 3, 2], [2, 1, 2, 3, 2, 1, 2, 3, 4], [3, 2, 1, 4, 3, 2, 1, 4, 3], [1, 2, 3, 2, 1, 2, 3, 2, 1], [3, 4, 3, 4, 3, 4, 3, 4, 3], [2, 3, 4, 3, 2, 3, 4, 3, 2], [1, 2, 3, 4, 1, 2, 3, 4, 1], [4, 3, 4, 3, 4, 3, 4, 3, 4], [3, 4, 3, 2, 1, 2, 3, 4, 3], [2, 1, 2, 3, 4, 3, 2, 1, 2], [1, 4, 3, 2, 1, 4, 3, 2, 1]],
  [[1, 3, 3, 5, 5, 5, 5, 5, 5], [1, 3, 3, 3, 3, 5, 5, 5, 5], [1, 1, 1, 1, 1, 2, 2, 2, 2], [1, 3, 3, 3, 3, 1, 1, 1, 1], [1, 1, 1, 4, 4, 2, 2, 2, 2], [1, 3, 3, 4, 4, 2, 2, 2, 2], [1, 3, 3, 4, 4, 1, 1, 1, 1], [1, 1, 1, 4, 4, 2, 2, 2, 2], [1, 3, 3, 3, 3, 2, 2, 2, 2], [1, 3, 3, 3, 3, 1, 1, 1, 1], [2, 1, 1, 1, 1, 2, 2, 2, 2]],
  [[2, 2, 4, 2, 2, 2, 5, 2, 4], [2, 2, 4, 2, 5, 2, 4, 2, 3], [2, 3, 5, 2, 4, 2, 4, 2, 4], [2, 2, 4, 2, 5, 2, 4, 2, 3], [2, 3, 5, 2, 4, 2, 4, 2, 4], [5, 2, 4, 2, 3, 2, 4, 2, 5], [2, 2, 5, 2, 4, 2, 3, 2, 4], [2, 3, 4, 2, 5, 2, 4, 2, 5], [2, 2, 5, 2, 4, 2, 3, 2, 4], [2, 3, 4, 2, 5, 2, 4, 2, 5], [2, 2, 5, 2, 4, 2, 5, 2, 4], [5, 2, 4, 2, 3, 2, 4, 2, 3], [2, 3, 5, 2, 4, 2, 4, 2, 4], [2, 2, 4, 2, 5, 2, 4, 2, 3]],
  [[3, 3, 3, 3, 3, 3, 3, 3, 3], [3, 2, 2, 2, 2, 2, 2, 2, 3], [3, 2, 1, 1, 1, 1, 1, 2, 3], [3, 2, 1, 1, 1, 1, 1, 2, 3], [3, 2, 1, 1, 5, 1, 1, 2, 3], [3, 2, 1, 1, 5, 1, 1, 2, 3], [3, 2, 1, 1, 5, 1, 1, 2, 3], [3, 2, 1, 1, 1, 1, 1, 2, 3], [3, 2, 2, 2, 2, 2, 2, 2, 3], [3, 3, 3, 3, 4, 3, 3, 3, 3], [3, 3, 3, 3, 4, 3, 3, 3, 3], [3, 3, 3, 3, 4, 3, 3, 3, 3], [3, 3, 3, 3, 3, 3, 3, 3, 3]],
  [[3, 4, 2, 4, 2, 4, 2, 4, 1], [1, 4, 2, 4, 2, 4, 2, 4, 1], [1, 4, 2, 4, 2, 4, 2, 4, 1], [1, 2, 2, 3, 2, 2, 2, 3, 1], [3, 4, 2, 4, 2, 4, 2, 4, 1], [1, 4, 2, 4, 2, 4, 2, 4, 1], [1, 2, 2, 2, 2, 2, 2, 2, 1], [3, 3, 3, 3, 3, 3, 3, 3, 1], [1, 5, 5, 5, 5, 5, 5, 5, 1], [1, 2, 2, 2, 2, 2, 2, 2, 1], [3, 4, 2, 4, 2, 4, 2, 4, 1]],
  [[4, 2, 3, 2, 4, 1, 1, 2, 1], [2, 3, 2, 4, 1, 4, 2, 3, 4], [1, 4, 2, 3, 4, 1, 1, 4, 3], [4, 1, 3, 2, 1, 3, 4, 2, 3], [3, 2, 3, 3, 1, 2, 2, 1, 1], [2, 2, 2, 1, 3, 4, 1, 4, 2], [1, 1, 1, 3, 2, 1, 3, 3, 4], [3, 3, 3, 2, 4, 3, 2, 2, 2], [2, 2, 2, 4, 3, 2, 1, 1, 1], [1, 1, 1, 1, 2, 4, 3, 4, 3], [4, 4, 4, 3, 1, 2, 2, 3, 2]],
  [[5, 5, 5, 5, 5, 5, 5, 5, 5], [5, 3, 3, 3, 3, 3, 3, 3, 5], [5, 3, 1, 1, 2, 2, 1, 3, 5], [5, 3, 1, 4, 4, 4, 1, 3, 5], [5, 3, 2, 4, 4, 4, 2, 3, 5], [5, 3, 2, 2, 2, 2, 2, 3, 5], [5, 3, 1, 1, 1, 1, 1, 3, 5], [5, 3, 3, 3, 3, 3, 3, 3, 5], [5, 5, 5, 5, 5, 5, 5, 5, 5]],
  [[2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5], [2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5], [2, 2, 3, 3, 4, 4, 4, 4, 4, 5, 5], [2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 5], [2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4], [2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4], [2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4], [2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4], [2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4], [2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3], [2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3], [2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]],
  [[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4], [5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5], [5, 2, 3, 3, 3, 3, 3, 3, 3, 2, 5], [5, 2, 3, 3, 3, 3, 3, 3, 3, 2, 5], [5, 2, 3, 3, 2, 2, 2, 3, 3, 2, 5], [5, 2, 3, 3, 2, 5, 2, 3, 3, 2, 5], [5, 2, 3, 3, 2, 2, 2, 3, 3, 2, 5], [5, 2, 3, 3, 3, 3, 3, 3, 3, 2, 5], [5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5], [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]],
  [[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2], [2, 3, 4, 4, 4, 1, 1, 1, 4, 4, 3, 2], [2, 3, 4, 1, 1, 1, 3, 1, 1, 4, 3, 2], [2, 3, 4, 1, 3, 3, 3, 3, 1, 4, 3, 2], [2, 3, 4, 1, 3, 4, 4, 3, 1, 4, 3, 2], [2, 3, 4, 1, 3, 4, 4, 3, 1, 4, 3, 2], [2, 3, 4, 1, 3, 3, 3, 3, 1, 4, 3, 2], [2, 3, 4, 1, 1, 1, 1, 1, 1, 4, 3, 2], [2, 3, 4, 4, 4, 1, 1, 1, 4, 4, 3, 2], [2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]],
  [[3, 3, 1, 1, 1, 3, 3, 4, 4], [3, 3, 1, 2, 2, 3, 3, 4, 4], [3, 3, 1, 2, 2, 3, 3, 4, 4], [3, 3, 2, 2, 2, 4, 4, 4, 4], [2, 2, 2, 2, 2, 2, 2, 4, 4], [2, 2, 2, 2, 2, 2, 2, 4, 4], [3, 3, 2, 2, 2, 4, 4, 4, 4], [3, 3, 2, 2, 2, 4, 4, 4, 4], [3, 3, 2, 2, 2, 4, 4, 4, 4], [3, 3, 1, 1, 1, 3, 3, 4, 4], [2, 2, 1, 1, 1, 2, 2, 4, 4], [3, 3, 1, 1, 1, 3, 3, 4, 4], [3, 3, 2, 2, 2, 4, 4, 4, 4], [2, 2, 2, 2, 2, 2, 2, 4, 4], [3, 3, 2, 2, 2, 4, 4, 4, 4]],
]

const bigBoards = [
  [[2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3],
  [1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 2, 2, 2],
  [2, 4, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5],
  [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5],
  [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5],
  [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3],
  [2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
  [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
  [2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
  [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
  ],
  [[2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4],
  [2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4],
  [2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2],
  [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1],
  [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1],
  [3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],],
  [[1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4],
  [2, 3, 3, 3, 3, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5],
  [3, 3, 5, 3, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4],
  [4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3],
  [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 2, 1, 2, 3, 4],
  [4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1],
  [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2],
  [2, 1, 2, 3, 3, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3],
  [1, 2, 3, 4, 3, 3, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4],
  [2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5],
  [3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4],
  [4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3],
  [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2],
  [4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1],
  [3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2],
  [2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3],
  [1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 4],
  [2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5],
  [3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4],
  [4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3],
  [5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 2, 1, 2, 3, 4],
  [4, 3, 2, 1, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4],
  [3, 2, 1, 2, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5],
  [2, 1, 2, 3, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 3, 4],
  [1, 2, 3, 4, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3]],
  [[2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3],
  [2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4],
  [2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5],
  [2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 5],
  [2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 5],
  [2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5],
  [2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [2, 3, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 2, 2, 4, 5, 5],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 2, 2, 4, 4, 4],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5],
  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5]],
]

const boardRegex = /\[\s*(\[(\s*\d+,\s*)+\d+\],?\s*)+\]/

export const createNewAiBoard = async (): Promise<RawBoard> => {
  const aiResponse = await fetchBoard()
  console.log("ai response: ", aiResponse)
  const text = aiResponse.match(boardRegex)[0]
  const board = JSON.parse(text.trim())
  console.log("board: ", board)
  if (!validateBoard(board)) {
    console.error("invalid board: ", board)
    return createNewAiBoard()
  }
  return board
}

export const getBoardById = (id:number) => {
  return pregeneratedBoards[id]
}

export const getAiBoard = async (numberOfPlayers:number): Promise<RawBoard> => {
  // return bigBoards[3]
  return pregeneratedBoards[2]
  if (numberOfPlayers > 3) {
    return bigBoards[randomInt(bigBoards.length)]
  }

  const rand = randomInt(pregeneratedBoards.length)
  console.log("using board: ", rand)
  return pregeneratedBoards[rand]
}

export const validateBoard = (board: RawBoard) => {
  // first of all make sure all rows and columns have one passable
  const rowLength = board[0].length

  if (!board.every((row, i) => {
    // allow the first and last row to be impassable
    if (i === 0 || i === board.length - 1) {
      return true
    }
    return row.some((tile) => tile < TileType.water)
  })) {
    console.log("invalid board, no passable tiles in any row")
    return false
  }

  // check to make sure every column except the first and last has at least one passable tile
  for (let i = 1; i < rowLength - 1; i++) {
    if (board.every((row) => {
      row[i] >= TileType.water
    })) {
      console.log("invalid board, no passable tiles in any column")
      return false
    }
  }

  return true
}
