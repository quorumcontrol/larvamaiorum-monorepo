/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HitchensOrderStatisticsTreeLib,
  HitchensOrderStatisticsTreeLibInterface,
} from "../HitchensOrderStatisticsTreeLib";

const _abi = [
  {
    constant: true,
    inputs: [
      {
        name: "self",
        type: "HitchensOrderStatisticsTreeLib.Tree storage",
      },
      {
        name: "value",
        type: "uint256",
      },
    ],
    name: "below",
    outputs: [
      {
        name: "_below",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "self",
        type: "HitchensOrderStatisticsTreeLib.Tree storage",
      },
      {
        name: "value",
        type: "uint256",
      },
    ],
    name: "above",
    outputs: [
      {
        name: "_above",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6102a8610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061005c577c010000000000000000000000000000000000000000000000000000000060003504637a1b1bb9811461006157806382d26d9314610096575b600080fd5b6100846004803603604081101561007757600080fd5b50803590602001356100b9565b60408051918252519081900360200190f35b610084600480360360408110156100ac57600080fd5b50803590602001356100ed565b6000806100c58461010e565b1180156100d25750600082115b156100e75760016100e3848461011e565b0390505b92915050565b6000806100f98461010e565b11156100e757610109838361011e565b6100e3845b60006100e7828360000154610212565b60008061012a8461010e565b11156100e75782546000818152600180860160205260408220908101549192918390610157908890610212565b90505b8315156102045760048201548387141561017757600194506101e9565b868410156101b6578260020154935087600101600085815260200190815260200160002092506101ab888460010154610212565b8101820191506101e9565b8260010154935087600101600085815260200190815260200160002092506101e2888460020154610212565b8101820391505b6101f38885610233565b15156101fe57600194505b5061015a565b60010193506100e792505050565b60009081526001919091016020526040902060068101546004909101540190565b6000811515610244575060006100e7565b8254821415610255575060016100e7565b600082815260018401602052604090205415610273575060016100e7565b5060009291505056fea165627a7a723058209ce7618c8dba8e40e05d896836439640cb98f7ba02fc67313d98f05b793f627f0029";

export class HitchensOrderStatisticsTreeLib__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HitchensOrderStatisticsTreeLib> {
    return super.deploy(
      overrides || {}
    ) as Promise<HitchensOrderStatisticsTreeLib>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): HitchensOrderStatisticsTreeLib {
    return super.attach(address) as HitchensOrderStatisticsTreeLib;
  }
  connect(signer: Signer): HitchensOrderStatisticsTreeLib__factory {
    return super.connect(signer) as HitchensOrderStatisticsTreeLib__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HitchensOrderStatisticsTreeLibInterface {
    return new utils.Interface(_abi) as HitchensOrderStatisticsTreeLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HitchensOrderStatisticsTreeLib {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as HitchensOrderStatisticsTreeLib;
  }
}
