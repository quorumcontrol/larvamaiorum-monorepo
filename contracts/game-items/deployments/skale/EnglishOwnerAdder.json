{
  "address": "0xF7630C0f7fEc4B9d670cb59A82a72D32b256d050",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "STATEMENT",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safe",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "device",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "issuedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenAuthenticated.TokenRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "device",
          "type": "address"
        }
      ],
      "name": "createTokenRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "device",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "issuedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenAuthenticated.TokenRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lengthOfToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x728d78bfc9e2b4febc52fabcc0f751da7097127056b1953d54b7d47e87e998d5",
  "receipt": {
    "to": "0xf461635EbfA16074b07322781fCcaAA43F852a17",
    "from": "0x6DE3D3747D54d0Adc11e5Cf678D4045B0441D332",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "1820013",
    "logsBloom": "0x
    "blockHash": "0xa79754b34ffba75a5b1b95cb0e5464119ed5d3e879d43e5f26576fb9b7308707",
    "transactionHash": "0x728d78bfc9e2b4febc52fabcc0f751da7097127056b1953d54b7d47e87e998d5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2413238,
        "transactionHash": "0x728d78bfc9e2b4febc52fabcc0f751da7097127056b1953d54b7d47e87e998d5",
        "address": "0xf461635EbfA16074b07322781fCcaAA43F852a17",
        "topics": [
          "0x94bfd9af14ef450884c8a7ddb5734e2e1e14e70a1c84f0801cc5a29e34d26428",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000f7630c0f7fec4b9d670cb59a82a72d32b256d0500000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0xa79754b34ffba75a5b1b95cb0e5464119ed5d3e879d43e5f26576fb9b7308707"
      }
    ],
    "blockNumber": 2413238,
    "cumulativeGasUsed": "1820013",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "69bee98d5ceaf11b3e3d61ef42fe1119",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"STATEMENT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenAuthenticated.TokenRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"}],\"name\":\"createTokenRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenAuthenticated.TokenRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lengthOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnglishOwnerAdder.sol\":\"EnglishOwnerAdder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/EnglishOwnerAdder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./TokenAuthenticated.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\n\\ncontract EnglishOwnerAdder is TokenAuthenticated {\\n\\n    constructor() TokenAuthenticated(\\\"I authorize this device to send transactions on my behalf.\\\") {}\\n\\n    function addOwner(\\n        address _safe,\\n        TokenRequest calldata request,\\n        bytes calldata signature\\n    ) external {\\n        require(authenticate(request, signature));\\n\\n        GnosisSafe safe = GnosisSafe(_safe);\\n\\n        {\\n            uint256 threshold = safe.getThreshold();\\n            require(\\n                threshold == 1,\\n                \\\"Only safe's with a threshold of one are supported\\\"\\n            );\\n            require(safe.isOwner(request.owner), \\\"Owner is not a safe owner\\\");\\n        }\\n\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"addOwnerWithThreshold(address,uint256)\\\",\\n            request.device,\\n            1\\n        );\\n        GnosisSafe(_safe).execTransactionFromModule(\\n            _safe,\\n            0,\\n            data,\\n            Enum.Operation.Call\\n        );\\n    }\\n\\n}\\n\",\"keccak256\":\"0xeb8870abd99f162e519a02867ee9f0b76583405315f7b26d89a9680b4691ea1e\",\"license\":\"MIT\"},\"contracts/TokenAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title TokenAuthenticated\\n * @dev allow a user to authenticate with a signed english token.\\n */\\ncontract TokenAuthenticated {\\n    string public STATEMENT;\\n\\n    uint256 public lengthOfToken = 15;\\n       \\n    struct TokenRequest {\\n        address owner;\\n        address device;\\n        uint256 issuedAt;\\n    }\\n\\n    constructor(string memory _statement) {\\n        STATEMENT = _statement;\\n    }\\n\\n    function _updateStatement(string memory newStatement) internal {\\n        STATEMENT = newStatement;\\n    }\\n\\n    function _updateLengthOfToken(uint256 newLength) internal {\\n        lengthOfToken = newLength;\\n    }\\n\\n    function authenticate(\\n        TokenRequest calldata request,\\n        bytes calldata signature\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = hashForToken(request);\\n        address signer = ECDSA.recover(msgHash, signature);\\n        require(signer == request.owner, \\\"invalid signature\\\");\\n        require(\\n            request.issuedAt >= block.number - lengthOfToken,\\n            \\\"Request is too old\\\"\\n        );\\n        return true;\\n    }\\n\\n    function createTokenRequest(\\n        address owner,\\n        address device\\n    ) public view returns (TokenRequest memory request, string memory) {\\n        request = TokenRequest({\\n            owner: owner,\\n            device: device,\\n            issuedAt: block.number - 1\\n        });\\n        return (request, stringToSign(request));\\n    }\\n\\n\\n    /**\\n     * @dev Returns the string to sign of the provided WalletCreateRequest.\\n     * @param request The WalletCreateRequest struct containing the owner address, device address, and issuedAt block number.\\n     */\\n    function stringToSign(\\n        TokenRequest memory request\\n    ) internal view returns (string memory) {\\n        return string(abi.encodePacked(\\n            STATEMENT,\\n            \\\"\\\\n\\\\nMe: \\\",\\n            Strings.toHexString(request.owner),\\n            \\\"\\\\nDevice: \\\",\\n            Strings.toHexString(request.device),\\n            \\\"\\\\nIssued at: \\\",\\n            Strings.toString(request.issuedAt)\\n        ));\\n    }\\n\\n    function hashForToken(\\n        TokenRequest calldata request\\n    ) internal view returns (bytes32) {\\n        return ECDSA.toEthSignedMessageHash(bytes(stringToSign(request)));\\n    }\\n}\",\"keccak256\":\"0x46bcf484ada1e1d321fd73afe7060e7e0b3930ba844bc32599fe88b7860715ce\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"pragma solidity ^0.8.19;\\n\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\\ninterface GnosisSafe {\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    function getThreshold() external view returns (uint256);\\n\\n    function getOwners() external view returns (address[] memory);\\n\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function enableModule(address module) external;\\n}\\n\",\"keccak256\":\"0x24f2aae9d94b5a3f8e69fe4628bb053a35c4d9ad3343469d2d2bd66d13c67038\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063724e59c314610051578063b6ad16a81461006d578063bebc479c1461009e578063cb2e6043146100bc575b600080fd5b61006b60048036038101906100669190610f3d565b6100da565b005b61008760048036038101906100829190610fb1565b6103a9565b6040516100959291906110eb565b60405180910390f35b6100a661041d565b6040516100b3919061111b565b60405180910390f35b6100c46104ab565b6040516100d1919061114c565b60405180910390f35b6100e58383836104b1565b6100ee57600080fd5b600084905060008173ffffffffffffffffffffffffffffffffffffffff1663e75235b86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101649190611193565b9050600181146101a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a090611232565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16632f54bf6e8660000160208101906101d89190611252565b6040518263ffffffff1660e01b81526004016101f4919061128e565b602060405180830381865afa158015610211573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061023591906112e1565b610274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026b9061135a565b60405180910390fd5b50600084602001602081019061028a9190611252565b600160405160240161029d9291906113cc565b6040516020818303038152906040527f0d582f13000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508573ffffffffffffffffffffffffffffffffffffffff1663468721a78760008460006040518563ffffffff1660e01b815260040161035d94939291906114fc565b6020604051808303816000875af115801561037c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a091906112e1565b50505050505050565b6103b1610df5565b606060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020016001436104039190611577565b815250915081610412836105f2565b915091509250929050565b6000805461042a906115da565b80601f0160208091040260200160405190810160405280929190818152602001828054610456906115da565b80156104a35780601f10610478576101008083540402835291602001916104a3565b820191906000526020600020905b81548152906001019060200180831161048657829003601f168201915b505050505081565b60015481565b6000806104bd85610646565b9050600061050f8286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610670565b90508560000160208101906105249190611252565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058890611657565b60405180910390fd5b6001544361059f9190611577565b866040013510156105e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dc906116c3565b60405180910390fd5b6001925050509392505050565b606060006106038360000151610697565b6106108460200151610697565b61061d85604001516106c4565b604051602001610630949392919061189b565b6040516020818303038152906040529050919050565b60006106696106648380360381019061065f91906119f3565b6105f2565b610792565b9050919050565b600080600061067f85856107cd565b9150915061068c8161081e565b819250505092915050565b60606106bd8273ffffffffffffffffffffffffffffffffffffffff16601460ff16610984565b9050919050565b6060600060016106d384610bc0565b01905060008167ffffffffffffffff8111156106f2576106f16118ff565b5b6040519080825280601f01601f1916602001820160405280156107245781602001600182028036833780820191505090505b509050600082602001820190505b600115610787578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161077b5761077a611a20565b5b04945060008503610732575b819350505050919050565b600061079e82516106c4565b826040516020016107b0929190611ad7565b604051602081830303815290604052805190602001209050919050565b600080604183510361080e5760008060006020860151925060408601519150606086015160001a905061080287828585610d13565b94509450505050610817565b60006002915091505b9250929050565b6000600481111561083257610831611485565b5b81600481111561084557610844611485565b5b0315610981576001600481111561085f5761085e611485565b5b81600481111561087257610871611485565b5b036108b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a990611b52565b60405180910390fd5b600260048111156108c6576108c5611485565b5b8160048111156108d9576108d8611485565b5b03610919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091090611bbe565b60405180910390fd5b6003600481111561092d5761092c611485565b5b8160048111156109405761093f611485565b5b03610980576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097790611c50565b60405180910390fd5b5b50565b6060600060028360026109979190611c70565b6109a19190611cb2565b67ffffffffffffffff8111156109ba576109b96118ff565b5b6040519080825280601f01601f1916602001820160405280156109ec5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610a2457610a23611ce6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610a8857610a87611ce6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610ac89190611c70565b610ad29190611cb2565b90505b6001811115610b72577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110610b1457610b13611ce6565b5b1a60f81b828281518110610b2b57610b2a611ce6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080610b6b90611d15565b9050610ad5565b5060008414610bb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bad90611d8a565b60405180910390fd5b8091505092915050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610c1e577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610c1457610c13611a20565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610c5b576d04ee2d6d415b85acef81000000008381610c5157610c50611a20565b5b0492506020810190505b662386f26fc100008310610c8a57662386f26fc100008381610c8057610c7f611a20565b5b0492506010810190505b6305f5e1008310610cb3576305f5e1008381610ca957610ca8611a20565b5b0492506008810190505b6127108310610cd8576127108381610cce57610ccd611a20565b5b0492506004810190505b60648310610cfb5760648381610cf157610cf0611a20565b5b0492506002810190505b600a8310610d0a576001810190505b80915050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610d4e576000600391509150610dec565b600060018787878760405160008152602001604052604051610d739493929190611dd2565b6020604051602081039080840390855afa158015610d95573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610de357600060019250925050610dec565b80600092509250505b94509492505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e8182610e56565b9050919050565b610e9181610e76565b8114610e9c57600080fd5b50565b600081359050610eae81610e88565b92915050565b600080fd5b600060608284031215610ecf57610ece610eb4565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610efd57610efc610ed8565b5b8235905067ffffffffffffffff811115610f1a57610f19610edd565b5b602083019150836001820283011115610f3657610f35610ee2565b5b9250929050565b60008060008060a08587031215610f5757610f56610e4c565b5b6000610f6587828801610e9f565b9450506020610f7687828801610eb9565b935050608085013567ffffffffffffffff811115610f9757610f96610e51565b5b610fa387828801610ee7565b925092505092959194509250565b60008060408385031215610fc857610fc7610e4c565b5b6000610fd685828601610e9f565b9250506020610fe785828601610e9f565b9150509250929050565b610ffa81610e76565b82525050565b6000819050919050565b61101381611000565b82525050565b60608201600082015161102f6000850182610ff1565b5060208201516110426020850182610ff1565b506040820151611055604085018261100a565b50505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561109557808201518184015260208101905061107a565b60008484015250505050565b6000601f19601f8301169050919050565b60006110bd8261105b565b6110c78185611066565b93506110d7818560208601611077565b6110e0816110a1565b840191505092915050565b60006080820190506111006000830185611019565b818103606083015261111281846110b2565b90509392505050565b6000602082019050818103600083015261113581846110b2565b905092915050565b61114681611000565b82525050565b6000602082019050611161600083018461113d565b92915050565b61117081611000565b811461117b57600080fd5b50565b60008151905061118d81611167565b92915050565b6000602082840312156111a9576111a8610e4c565b5b60006111b78482850161117e565b91505092915050565b7f4f6e6c792073616665277320776974682061207468726573686f6c64206f662060008201527f6f6e652061726520737570706f72746564000000000000000000000000000000602082015250565b600061121c603183611066565b9150611227826111c0565b604082019050919050565b6000602082019050818103600083015261124b8161120f565b9050919050565b60006020828403121561126857611267610e4c565b5b600061127684828501610e9f565b91505092915050565b61128881610e76565b82525050565b60006020820190506112a3600083018461127f565b92915050565b60008115159050919050565b6112be816112a9565b81146112c957600080fd5b50565b6000815190506112db816112b5565b92915050565b6000602082840312156112f7576112f6610e4c565b5b6000611305848285016112cc565b91505092915050565b7f4f776e6572206973206e6f7420612073616665206f776e657200000000000000600082015250565b6000611344601983611066565b915061134f8261130e565b602082019050919050565b6000602082019050818103600083015261137381611337565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b60006113b66113b16113ac8461137a565b611391565b611384565b9050919050565b6113c68161139b565b82525050565b60006040820190506113e1600083018561127f565b6113ee60208301846113bd565b9392505050565b6000819050919050565b600061141a611415611410846113f5565b611391565b611000565b9050919050565b61142a816113ff565b82525050565b600081519050919050565b600082825260208201905092915050565b600061145782611430565b611461818561143b565b9350611471818560208601611077565b61147a816110a1565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106114c5576114c4611485565b5b50565b60008190506114d6826114b4565b919050565b60006114e6826114c8565b9050919050565b6114f6816114db565b82525050565b6000608082019050611511600083018761127f565b61151e6020830186611421565b8181036040830152611530818561144c565b905061153f60608301846114ed565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061158282611000565b915061158d83611000565b92508282039050818111156115a5576115a4611548565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806115f257607f821691505b602082108103611605576116046115ab565b5b50919050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000611641601183611066565b915061164c8261160b565b602082019050919050565b6000602082019050818103600083015261167081611634565b9050919050565b7f5265717565737420697320746f6f206f6c640000000000000000000000000000600082015250565b60006116ad601283611066565b91506116b882611677565b602082019050919050565b600060208201905081810360008301526116dc816116a0565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154611710816115da565b61171a81866116e3565b94506001821660008114611735576001811461174a5761177d565b60ff198316865281151582028601935061177d565b611753856116ee565b60005b8381101561177557815481890152600182019150602081019050611756565b838801955050505b50505092915050565b7f0a0a4d653a200000000000000000000000000000000000000000000000000000600082015250565b60006117bc6006836116e3565b91506117c782611786565b600682019050919050565b60006117dd8261105b565b6117e781856116e3565b93506117f7818560208601611077565b80840191505092915050565b7f0a4465766963653a200000000000000000000000000000000000000000000000600082015250565b60006118396009836116e3565b915061184482611803565b600982019050919050565b7f0a4973737565642061743a200000000000000000000000000000000000000000600082015250565b6000611885600c836116e3565b91506118908261184f565b600c82019050919050565b60006118a78287611703565b91506118b2826117af565b91506118be82866117d2565b91506118c98261182c565b91506118d582856117d2565b91506118e082611878565b91506118ec82846117d2565b915081905095945050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611937826110a1565b810181811067ffffffffffffffff82111715611956576119556118ff565b5b80604052505050565b6000611969610e42565b9050611975828261192e565b919050565b60008135905061198981611167565b92915050565b6000606082840312156119a5576119a46118fa565b5b6119af606061195f565b905060006119bf84828501610e9f565b60008301525060206119d384828501610e9f565b60208301525060406119e78482850161197a565b60408301525092915050565b600060608284031215611a0957611a08610e4c565b5b6000611a178482850161198f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000600082015250565b6000611a85601a836116e3565b9150611a9082611a4f565b601a82019050919050565b600081905092915050565b6000611ab182611430565b611abb8185611a9b565b9350611acb818560208601611077565b80840191505092915050565b6000611ae282611a78565b9150611aee82856117d2565b9150611afa8284611aa6565b91508190509392505050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611b3c601883611066565b9150611b4782611b06565b602082019050919050565b60006020820190508181036000830152611b6b81611b2f565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611ba8601f83611066565b9150611bb382611b72565b602082019050919050565b60006020820190508181036000830152611bd781611b9b565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c3a602283611066565b9150611c4582611bde565b604082019050919050565b60006020820190508181036000830152611c6981611c2d565b9050919050565b6000611c7b82611000565b9150611c8683611000565b9250828202611c9481611000565b91508282048414831517611cab57611caa611548565b5b5092915050565b6000611cbd82611000565b9150611cc883611000565b9250828201905080821115611ce057611cdf611548565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611d2082611000565b915060008203611d3357611d32611548565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000611d74602083611066565b9150611d7f82611d3e565b602082019050919050565b60006020820190508181036000830152611da381611d67565b9050919050565b6000819050919050565b611dbd81611daa565b82525050565b611dcc81611384565b82525050565b6000608082019050611de76000830187611db4565b611df46020830186611dc3565b611e016040830185611db4565b611e0e6060830184611db4565b9594505050505056fea26469706673582212205f733fd7aa5b7698f0084ceae10bc0ae2ee988894ef29bbedd5dc9aa5d453a6a64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1491,
        "contract": "contracts/EnglishOwnerAdder.sol:EnglishOwnerAdder",
        "label": "STATEMENT",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1494,
        "contract": "contracts/EnglishOwnerAdder.sol:EnglishOwnerAdder",
        "label": "lengthOfToken",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}