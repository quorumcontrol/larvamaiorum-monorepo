{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/PoWSecure.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n// import \"hardhat/console.sol\";\n\n// This is almost verbatim from https://github.com/Dirt-Road-Development/sfuel-distribution-contract/blob/master/contracts/PoWSecure.sol\n// except that the constructor is changed to allow for deterministic deploys\n\ncontract PoWSecure is Ownable { \n    \n    /**\n     * @dev the AmountUpdated Event is called when amount which contracts\n     * pays to user is updated\n     */\n    event AmountUpdated(uint256 indexed originalAmount, uint256 indexed newAmount, address indexed signer);\n\n    /**\n     * @dev the Payed Event is called with a successful pay\n     */\n    event Payed(address indexed payee, uint256 indexed amount, uint256 indexed timestamp);\n    \n    /**\n     * @dev the StateToggled Event is called when state is changed\n     */\n    event StateToggled(address indexed signer, bool indexed newState);\n\n    /**\n     * @dev the amount the contract should fill a user up to\n     * 0.0001 is enough to send 10K txs with average gas consumption 100K gas \n     * @notice can be changed by the owner\n     */\n    uint256 private amount = 0.0001 ether;\n\n    /**\n     * @dev Value used to determine state\n     */\n    bool private isActive;\n    \n    /**\n     * @dev Allows owner to temporarily pause the contract\n     */\n    modifier onlyActive {\n        require(isActive, \"PoWSecure: Contract is Paused\");\n        _;\n    }\n\n    constructor (address initialOwner) Ownable() {\n        isActive = true;\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev function to receive Ether. msg.data must be empty\n     */\n    receive() external payable {}\n    \n    /**\n     * @dev fallback function is called when msg.data is not empty\n     */\n    fallback() external payable {}\n\n    /**\n     * @dev Gets the balance of the contract (sFUEL)\n     */\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n    \n    /**\n     * @dev The pay function hit via PoW\n     * @param receiver is a payable address\n     */\n    function pay(address payable receiver) external onlyActive {\n        require(getBalance() >= amount, \"PoWSecure: Contract Empty\");\n\n        uint256 receiverBalance = receiver.balance;\n        if (receiverBalance < amount) {\n            uint256 payableAmount = amount - receiverBalance;\n            receiver.transfer(payableAmount);\n            emit Payed(receiver, payableAmount, block.timestamp);\n        }\n    }\n\n    /**\n     * @dev Withdraw all SFUEL amount to the owner\n     */\n    function withdraw() external onlyOwner {\n        payable(owner()).transfer(getBalance());\n    }\n    \n    /**\n     * @dev Updates the base amount the contract checks for\n     * @param _newAmount -> Uint256\n     */\n    function updateAmount(uint256 _newAmount) external onlyOwner {\n        require(_newAmount > 0, \"PowSecure: Invalid Amount\");\n        uint256 originalAmount = amount;\n        amount = _newAmount;\n        emit AmountUpdated(originalAmount, amount, msg.sender);\n    }\n    \n    /**\n     * @dev Toggles the ability for users to use this contract via the sFUEL Station\n     */\n    function toggleState() external onlyOwner {\n        isActive = !isActive;\n        emit StateToggled(msg.sender, isActive);\n    }\n\n    /**\n     * @dev Gets the public amount this faucet gives out\n     */\n    function getAmount() external view returns (uint256) {\n        return amount;\n    }\n\n    /**\n     * @dev Gets the state of the active contract\n     * If true -> IsActive\n     */\n    function getState() external view returns (bool) {\n        return isActive;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}