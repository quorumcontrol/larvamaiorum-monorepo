{
  "address": "0x4AeE11EFB8686EDC0E8a38DF1CEF3Fcb8a782586",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "originalAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "AmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Payed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "newState",
          "type": "bool"
        }
      ],
      "name": "StateToggled",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "getAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newAmount",
          "type": "uint256"
        }
      ],
      "name": "updateAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x95f65f48a05d667ff1af37d9b892abb47a63f2cb27244708078ec41351d0386e",
  "receipt": {
    "to": "0xf461635EbfA16074b07322781fCcaAA43F852a17",
    "from": "0x6DE3D3747D54d0Adc11e5Cf678D4045B0441D332",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "465499",
    "logsBloom": "0x004000000000000000000000000000000000100000000000008000000000000000000000000000000000000000100000800000000000000000000000000000000010000000000000a0800000000000000001000000000800000000000000000000000000020440000000000000000800000000000000000000000000000000400000000000020000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000020000000000000000200000000000000000000000000000000000000000000000000",
    "blockHash": "0x6d83b8f61939b85d5c97a890425e1c6229a3fbfc7a196346425cfcf95957e075",
    "transactionHash": "0x95f65f48a05d667ff1af37d9b892abb47a63f2cb27244708078ec41351d0386e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2430314,
        "transactionHash": "0x95f65f48a05d667ff1af37d9b892abb47a63f2cb27244708078ec41351d0386e",
        "address": "0x4AeE11EFB8686EDC0E8a38DF1CEF3Fcb8a782586",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f461635ebfa16074b07322781fccaaa43f852a17"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6d83b8f61939b85d5c97a890425e1c6229a3fbfc7a196346425cfcf95957e075"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2430314,
        "transactionHash": "0x95f65f48a05d667ff1af37d9b892abb47a63f2cb27244708078ec41351d0386e",
        "address": "0x4AeE11EFB8686EDC0E8a38DF1CEF3Fcb8a782586",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000f461635ebfa16074b07322781fccaaa43f852a17",
          "0x0000000000000000000000006de3d3747d54d0adc11e5cf678d4045b0441d332"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6d83b8f61939b85d5c97a890425e1c6229a3fbfc7a196346425cfcf95957e075"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2430314,
        "transactionHash": "0x95f65f48a05d667ff1af37d9b892abb47a63f2cb27244708078ec41351d0386e",
        "address": "0xf461635EbfA16074b07322781fCcaAA43F852a17",
        "topics": [
          "0x94bfd9af14ef450884c8a7ddb5734e2e1e14e70a1c84f0801cc5a29e34d26428",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000004aee11efb8686edc0e8a38df1cef3fcb8a7825860000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0x6d83b8f61939b85d5c97a890425e1c6229a3fbfc7a196346425cfcf95957e075"
      }
    ],
    "blockNumber": 2430314,
    "cumulativeGasUsed": "465499",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6DE3D3747D54d0Adc11e5Cf678D4045B0441D332"
  ],
  "numDeployments": 1,
  "solcInputHash": "570a5af6b230326990a8394e07936a9e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"originalAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"AmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Payed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"StateToggled\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"updateAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"AmountUpdated(uint256,uint256,address)\":{\"details\":\"the AmountUpdated Event is called when amount which contracts pays to user is updated\"},\"Payed(address,uint256,uint256)\":{\"details\":\"the Payed Event is called with a successful pay\"},\"StateToggled(address,bool)\":{\"details\":\"the StateToggled Event is called when state is changed\"}},\"kind\":\"dev\",\"methods\":{\"getAmount()\":{\"details\":\"Gets the public amount this faucet gives out\"},\"getBalance()\":{\"details\":\"Gets the balance of the contract (sFUEL)\"},\"getState()\":{\"details\":\"Gets the state of the active contract If true -> IsActive\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pay(address)\":{\"details\":\"The pay function hit via PoW\",\"params\":{\"receiver\":\"is a payable address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"toggleState()\":{\"details\":\"Toggles the ability for users to use this contract via the sFUEL Station\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAmount(uint256)\":{\"details\":\"Updates the base amount the contract checks for\",\"params\":{\"_newAmount\":\"-> Uint256\"}},\"withdraw()\":{\"details\":\"Withdraw all SFUEL amount to the owner\"}},\"stateVariables\":{\"amount\":{\"details\":\"the amount the contract should fill a user up to 0.0001 is enough to send 10K txs with average gas consumption 100K gas \"},\"isActive\":{\"details\":\"Value used to determine state\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoWSecure.sol\":\"PoWSecure\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PoWSecure.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\n// This is almost verbatim from https://github.com/Dirt-Road-Development/sfuel-distribution-contract/blob/master/contracts/PoWSecure.sol\\n// except that the constructor is changed to allow for deterministic deploys\\n\\ncontract PoWSecure is Ownable { \\n    \\n    /**\\n     * @dev the AmountUpdated Event is called when amount which contracts\\n     * pays to user is updated\\n     */\\n    event AmountUpdated(uint256 indexed originalAmount, uint256 indexed newAmount, address indexed signer);\\n\\n    /**\\n     * @dev the Payed Event is called with a successful pay\\n     */\\n    event Payed(address indexed payee, uint256 indexed amount, uint256 indexed timestamp);\\n    \\n    /**\\n     * @dev the StateToggled Event is called when state is changed\\n     */\\n    event StateToggled(address indexed signer, bool indexed newState);\\n\\n    /**\\n     * @dev the amount the contract should fill a user up to\\n     * 0.0001 is enough to send 10K txs with average gas consumption 100K gas \\n     * @notice can be changed by the owner\\n     */\\n    uint256 private amount = 0.0001 ether;\\n\\n    /**\\n     * @dev Value used to determine state\\n     */\\n    bool private isActive;\\n    \\n    /**\\n     * @dev Allows owner to temporarily pause the contract\\n     */\\n    modifier onlyActive {\\n        require(isActive, \\\"PoWSecure: Contract is Paused\\\");\\n        _;\\n    }\\n\\n    constructor (address initialOwner) Ownable() {\\n        isActive = true;\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev function to receive Ether. msg.data must be empty\\n     */\\n    receive() external payable {}\\n    \\n    /**\\n     * @dev fallback function is called when msg.data is not empty\\n     */\\n    fallback() external payable {}\\n\\n    /**\\n     * @dev Gets the balance of the contract (sFUEL)\\n     */\\n    function getBalance() public view returns (uint) {\\n        return address(this).balance;\\n    }\\n    \\n    /**\\n     * @dev The pay function hit via PoW\\n     * @param receiver is a payable address\\n     */\\n    function pay(address payable receiver) external onlyActive {\\n        require(getBalance() >= amount, \\\"PoWSecure: Contract Empty\\\");\\n\\n        uint256 receiverBalance = receiver.balance;\\n        if (receiverBalance < amount) {\\n            uint256 payableAmount = amount - receiverBalance;\\n            receiver.transfer(payableAmount);\\n            emit Payed(receiver, payableAmount, block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw all SFUEL amount to the owner\\n     */\\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(getBalance());\\n    }\\n    \\n    /**\\n     * @dev Updates the base amount the contract checks for\\n     * @param _newAmount -> Uint256\\n     */\\n    function updateAmount(uint256 _newAmount) external onlyOwner {\\n        require(_newAmount > 0, \\\"PowSecure: Invalid Amount\\\");\\n        uint256 originalAmount = amount;\\n        amount = _newAmount;\\n        emit AmountUpdated(originalAmount, amount, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Toggles the ability for users to use this contract via the sFUEL Station\\n     */\\n    function toggleState() external onlyOwner {\\n        isActive = !isActive;\\n        emit StateToggled(msg.sender, isActive);\\n    }\\n\\n    /**\\n     * @dev Gets the public amount this faucet gives out\\n     */\\n    function getAmount() external view returns (uint256) {\\n        return amount;\\n    }\\n\\n    /**\\n     * @dev Gets the state of the active contract\\n     * If true -> IsActive\\n     */\\n    function getState() external view returns (bool) {\\n        return isActive;\\n    }\\n}\",\"keccak256\":\"0xa53eaee29497d7b848afb6c866903fbd58bbff7050777e275e5772fa4935da70\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052655af3107a400060015534801561001a57600080fd5b506040516106fe3803806106fe833981016040819052610039916100ae565b6100423361005e565b6002805460ff191660011790556100588161005e565b506100de565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100c057600080fd5b81516001600160a01b03811681146100d757600080fd5b9392505050565b610611806100ed6000396000f3fe6080604052600436106100825760003560e01c80630c11dedd1461008b57806312065fe0146100ab5780631865c57d146100cd57806334d6093d146100f05780633ccfd60b14610110578063715018a6146101255780638da5cb5b1461013a578063d321fe2914610167578063d37e51041461017c578063f2fde38b1461019157005b3661008957005b005b34801561009757600080fd5b506100896100a6366004610577565b6101b1565b3480156100b757600080fd5b50475b6040519081526020015b60405180910390f35b3480156100d957600080fd5b5060025460ff1660405190151581526020016100c4565b3480156100fc57600080fd5b5061008961010b36600461059b565b6102f4565b34801561011c57600080fd5b50610089610383565b34801561013157600080fd5b506100896103cb565b34801561014657600080fd5b5061014f6103df565b6040516001600160a01b0390911681526020016100c4565b34801561017357600080fd5b506001546100ba565b34801561018857600080fd5b506100896103ee565b34801561019d57600080fd5b506100896101ac366004610577565b61043d565b60025460ff166102085760405162461bcd60e51b815260206004820152601d60248201527f506f575365637572653a20436f6e74726163742069732050617573656400000060448201526064015b60405180910390fd5b6001544710156102565760405162461bcd60e51b8152602060048201526019602482015278506f575365637572653a20436f6e747261637420456d70747960381b60448201526064016101ff565b6001546001600160a01b03821631908110156102f05760008160015461027c91906105b4565b6040519091506001600160a01b0384169082156108fc029083906000818181858888f193505050501580156102b5573d6000803e3d6000fd5b504281846001600160a01b03167fc4afcd8d38f903c1c3c8ab41a84f6df29cb7fb88e0d7121bc9633c15eb94af8660405160405180910390a4505b5050565b6102fc6104b3565b600081116103485760405162461bcd60e51b8152602060048201526019602482015278141bddd4d958dd5c994e88125b9d985b1a5908105b5bdd5b9d603a1b60448201526064016101ff565b60018054908290556040513390839083907f32598843ebd8872cccdb9c21be935270ca4d457ae763774808d1b802e33f123390600090a45050565b61038b6104b3565b6103936103df565b6001600160a01b03166108fc476040518115909202916000818181858888f193505050501580156103c8573d6000803e3d6000fd5b50565b6103d36104b3565b6103dd6000610512565b565b6000546001600160a01b031690565b6103f66104b3565b6002805460ff19811660ff91821615908117909255604051911615159033907f756dab92326c7665f3daa85a3340c845b6f4f0e1b22c4b75a15bce75ba7abe9a90600090a3565b6104456104b3565b6001600160a01b0381166104aa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101ff565b6103c881610512565b336104bc6103df565b6001600160a01b0316146103dd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101ff565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146103c857600080fd5b60006020828403121561058957600080fd5b813561059481610562565b9392505050565b6000602082840312156105ad57600080fd5b5035919050565b818103818111156105d557634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122089dfca593a595289b316beb5aa4d424fba3efeafa0bec3b7fd72e2ae6c8016ce64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100825760003560e01c80630c11dedd1461008b57806312065fe0146100ab5780631865c57d146100cd57806334d6093d146100f05780633ccfd60b14610110578063715018a6146101255780638da5cb5b1461013a578063d321fe2914610167578063d37e51041461017c578063f2fde38b1461019157005b3661008957005b005b34801561009757600080fd5b506100896100a6366004610577565b6101b1565b3480156100b757600080fd5b50475b6040519081526020015b60405180910390f35b3480156100d957600080fd5b5060025460ff1660405190151581526020016100c4565b3480156100fc57600080fd5b5061008961010b36600461059b565b6102f4565b34801561011c57600080fd5b50610089610383565b34801561013157600080fd5b506100896103cb565b34801561014657600080fd5b5061014f6103df565b6040516001600160a01b0390911681526020016100c4565b34801561017357600080fd5b506001546100ba565b34801561018857600080fd5b506100896103ee565b34801561019d57600080fd5b506100896101ac366004610577565b61043d565b60025460ff166102085760405162461bcd60e51b815260206004820152601d60248201527f506f575365637572653a20436f6e74726163742069732050617573656400000060448201526064015b60405180910390fd5b6001544710156102565760405162461bcd60e51b8152602060048201526019602482015278506f575365637572653a20436f6e747261637420456d70747960381b60448201526064016101ff565b6001546001600160a01b03821631908110156102f05760008160015461027c91906105b4565b6040519091506001600160a01b0384169082156108fc029083906000818181858888f193505050501580156102b5573d6000803e3d6000fd5b504281846001600160a01b03167fc4afcd8d38f903c1c3c8ab41a84f6df29cb7fb88e0d7121bc9633c15eb94af8660405160405180910390a4505b5050565b6102fc6104b3565b600081116103485760405162461bcd60e51b8152602060048201526019602482015278141bddd4d958dd5c994e88125b9d985b1a5908105b5bdd5b9d603a1b60448201526064016101ff565b60018054908290556040513390839083907f32598843ebd8872cccdb9c21be935270ca4d457ae763774808d1b802e33f123390600090a45050565b61038b6104b3565b6103936103df565b6001600160a01b03166108fc476040518115909202916000818181858888f193505050501580156103c8573d6000803e3d6000fd5b50565b6103d36104b3565b6103dd6000610512565b565b6000546001600160a01b031690565b6103f66104b3565b6002805460ff19811660ff91821615908117909255604051911615159033907f756dab92326c7665f3daa85a3340c845b6f4f0e1b22c4b75a15bce75ba7abe9a90600090a3565b6104456104b3565b6001600160a01b0381166104aa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101ff565b6103c881610512565b336104bc6103df565b6001600160a01b0316146103dd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101ff565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146103c857600080fd5b60006020828403121561058957600080fd5b813561059481610562565b9392505050565b6000602082840312156105ad57600080fd5b5035919050565b818103818111156105d557634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122089dfca593a595289b316beb5aa4d424fba3efeafa0bec3b7fd72e2ae6c8016ce64736f6c63430008120033",
  "devdoc": {
    "events": {
      "AmountUpdated(uint256,uint256,address)": {
        "details": "the AmountUpdated Event is called when amount which contracts pays to user is updated"
      },
      "Payed(address,uint256,uint256)": {
        "details": "the Payed Event is called with a successful pay"
      },
      "StateToggled(address,bool)": {
        "details": "the StateToggled Event is called when state is changed"
      }
    },
    "kind": "dev",
    "methods": {
      "getAmount()": {
        "details": "Gets the public amount this faucet gives out"
      },
      "getBalance()": {
        "details": "Gets the balance of the contract (sFUEL)"
      },
      "getState()": {
        "details": "Gets the state of the active contract If true -> IsActive"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pay(address)": {
        "details": "The pay function hit via PoW",
        "params": {
          "receiver": "is a payable address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "toggleState()": {
        "details": "Toggles the ability for users to use this contract via the sFUEL Station"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAmount(uint256)": {
        "details": "Updates the base amount the contract checks for",
        "params": {
          "_newAmount": "-> Uint256"
        }
      },
      "withdraw()": {
        "details": "Withdraw all SFUEL amount to the owner"
      }
    },
    "stateVariables": {
      "amount": {
        "details": "the amount the contract should fill a user up to 0.0001 is enough to send 10K txs with average gas consumption 100K gas "
      },
      "isActive": {
        "details": "Value used to determine state"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PoWSecure.sol:PoWSecure",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 168,
        "contract": "contracts/PoWSecure.sol:PoWSecure",
        "label": "amount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 171,
        "contract": "contracts/PoWSecure.sol:PoWSecure",
        "label": "isActive",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}