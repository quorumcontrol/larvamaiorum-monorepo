{
  "address": "0x062b0011FF42b5334C0db79a96d0113E54B7C285",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gnosisSafeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gnosisSafeProxyFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultFallbackHandler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setupHandler",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CHAIN_ID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STATEMENT",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "device",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "issuedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenAuthenticated.TokenRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "englishOwnerAdder",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "firstTransaction",
          "type": "bytes"
        }
      ],
      "name": "createSafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "device",
          "type": "address"
        }
      ],
      "name": "createTokenRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "device",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "issuedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenAuthenticated.TokenRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "buffer",
          "type": "bytes"
        }
      ],
      "name": "iToHex",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lengthOfToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ownerToSafe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "safeToOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdbb4ab9e19901b3d9fb6831b552c50885fd8a8f4ca1ac5e1a981130fd33c2c6",
  "receipt": {
    "to": "0xf461635EbfA16074b07322781fCcaAA43F852a17",
    "from": "0x6DE3D3747D54d0Adc11e5Cf678D4045B0441D332",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "2456874",
    "logsBloom": "0x
    "blockHash": "0xe08e6d581c4ea5f9f5c37e76945c996f15103d3ecd5d7ab858d0d054d4338c7a",
    "transactionHash": "0xcdbb4ab9e19901b3d9fb6831b552c50885fd8a8f4ca1ac5e1a981130fd33c2c6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2877516,
        "transactionHash": "0xcdbb4ab9e19901b3d9fb6831b552c50885fd8a8f4ca1ac5e1a981130fd33c2c6",
        "address": "0xf461635EbfA16074b07322781fCcaAA43F852a17",
        "topics": [
          "0x94bfd9af14ef450884c8a7ddb5734e2e1e14e70a1c84f0801cc5a29e34d26428",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000062b0011ff42b5334c0db79a96d0113e54b7c2850000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0xe08e6d581c4ea5f9f5c37e76945c996f15103d3ecd5d7ab858d0d054d4338c7a"
      }
    ],
    "blockNumber": 2877516,
    "cumulativeGasUsed": "2456874",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEF7fb5bB2fC8DE903094BA94ded511412894773c",
    "0xA324d3cB4fc6f8D0Aec25Acf68720ed308405e80",
    "0xD63ec75B8E5679e6A62D23eb10b9c8bb77838630",
    "0x9b70998392a11c744282250Eb41bA4754d2521E9"
  ],
  "numDeployments": 3,
  "solcInputHash": "b684f3637234889233e8dc84c6b0d5e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gnosisSafeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gnosisSafeProxyFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultFallbackHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setupHandler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATEMENT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenAuthenticated.TokenRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"englishOwnerAdder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"firstTransaction\",\"type\":\"bytes\"}],\"name\":\"createSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"}],\"name\":\"createTokenRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenAuthenticated.TokenRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"buffer\",\"type\":\"bytes\"}],\"name\":\"iToHex\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lengthOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safeToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract that allows a user to create a Gnosis Safe wallet by signing an English message.      It sets up a a safe by calling the SafeStetup.sol contract which adds the correct modules and the TokenRequest      device and owner as owners to the safe.\",\"kind\":\"dev\",\"methods\":{\"createSafe((address,address,uint256),bytes,address,bytes)\":{\"details\":\"Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.\",\"params\":{\"request\":\"The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.\",\"signature\":\"The signature signed by the owner to verify ownership.\"}}},\"title\":\"WalletDeployer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WalletDeployer.sol\":\"WalletDeployer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/TokenAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title TokenAuthenticated\\n * @dev allow a user to authenticate with a signed english token.\\n */\\ncontract TokenAuthenticated {\\n    string public STATEMENT;\\n\\n    uint256 public lengthOfToken = 15;\\n       \\n    struct TokenRequest {\\n        address owner;\\n        address device;\\n        uint256 issuedAt;\\n    }\\n\\n    constructor(string memory _statement) {\\n        STATEMENT = _statement;\\n    }\\n\\n    function _updateStatement(string memory newStatement) internal {\\n        STATEMENT = newStatement;\\n    }\\n\\n    function _updateLengthOfToken(uint256 newLength) internal {\\n        lengthOfToken = newLength;\\n    }\\n\\n    function authenticate(\\n        TokenRequest calldata request,\\n        bytes calldata signature\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = hashForToken(request);\\n        address signer = ECDSA.recover(msgHash, signature);\\n        require(signer == request.owner, \\\"invalid signature\\\");\\n        require(\\n            request.issuedAt >= block.number - lengthOfToken,\\n            \\\"Request is too old\\\"\\n        );\\n        return true;\\n    }\\n\\n    function createTokenRequest(\\n        address owner,\\n        address device\\n    ) public view returns (TokenRequest memory request, string memory) {\\n        request = TokenRequest({\\n            owner: owner,\\n            device: device,\\n            issuedAt: block.number - 1\\n        });\\n        return (request, stringToSign(request));\\n    }\\n\\n\\n    /**\\n     * @dev Returns the string to sign of the provided WalletCreateRequest.\\n     * @param request The WalletCreateRequest struct containing the owner address, device address, and issuedAt block number.\\n     */\\n    function stringToSign(\\n        TokenRequest memory request\\n    ) internal view returns (string memory) {\\n        return string(abi.encodePacked(\\n            STATEMENT,\\n            \\\"\\\\n\\\\nMe: \\\",\\n            Strings.toHexString(request.owner),\\n            \\\"\\\\nDevice: \\\",\\n            Strings.toHexString(request.device),\\n            \\\"\\\\nIssued at: \\\",\\n            Strings.toString(request.issuedAt)\\n        ));\\n    }\\n\\n    function hashForToken(\\n        TokenRequest calldata request\\n    ) internal view returns (bytes32) {\\n        return ECDSA.toEthSignedMessageHash(bytes(stringToSign(request)));\\n    }\\n}\",\"keccak256\":\"0x46bcf484ada1e1d321fd73afe7060e7e0b3930ba844bc32599fe88b7860715ce\",\"license\":\"MIT\"},\"contracts/WalletDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./TokenAuthenticated.sol\\\";\\nimport \\\"./interfaces/IGnosisSafe.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface IProxyFactory {\\n    function createProxyWithNonce(\\n        address _mastercopy,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) external returns (address proxy);\\n}\\n\\ninterface IEnglishOwnerAdder {\\n    function addOwner(\\n        address safe,\\n        TokenAuthenticated.TokenRequest calldata request,\\n        bytes calldata signature\\n    ) external;\\n}\\n\\n/**\\n * @title WalletDeployer\\n * @dev A contract that allows a user to create a Gnosis Safe wallet by signing an English message.\\n *      It sets up a a safe by calling the SafeStetup.sol contract which adds the correct modules and the TokenRequest\\n *      device and owner as owners to the safe.\\n */\\ncontract WalletDeployer is TokenAuthenticated {\\n    string public CHAIN_ID;\\n\\n    address private immutable _gnosisSafeContract;\\n    address private immutable _gnosisSafeProxyFactory;\\n    address private immutable _defaultFallackhandler;\\n\\n    address private immutable _setupHandler;\\n\\n    bytes4 private constant SETUP_DATA = bytes4(keccak256(\\\"setup()\\\"));\\n\\n    // a mapping of owner to safe address\\n    mapping(address => address) public ownerToSafe;\\n    mapping(address => address) public safeToOwner;\\n\\n    constructor(\\n        address gnosisSafeContract,\\n        address gnosisSafeProxyFactory,\\n        address defaultFallbackHandler,\\n        address setupHandler\\n    )\\n        TokenAuthenticated(\\n            \\\"I authorize this device to send transactions on my behalf.\\\"\\n        )\\n    {\\n        CHAIN_ID = Strings.toString(block.chainid);\\n        _gnosisSafeContract = gnosisSafeContract;\\n        _gnosisSafeProxyFactory = gnosisSafeProxyFactory;\\n        _defaultFallackhandler = defaultFallbackHandler;\\n        _setupHandler = setupHandler;\\n    }\\n\\n    // async walletAddressForUser(user:Address):Promise<Address> {\\n    //     const setupData = await setupDataForUser(user)\\n\\n    //     const salt = utils.keccak256(utils.solidityPack(['bytes', 'uint256'], [utils.keccak256(setupData), this.chainId]))\\n    //     const initCode = utils.solidityKeccak256(['bytes', 'bytes'], [await this.proxyFactory.proxyCreationCode(), utils.defaultAbiCoder.encode(['address'], [MASTER_COPY_ADDR])])\\n\\n    //     const addr = utils.getCreate2Address(this.proxyFactory.address, salt, initCode)\\n    //     return addr.toLowerCase()\\n    //   }\\n\\n    /**\\n     * @dev Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.\\n     * @param request The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.\\n     * @param signature The signature signed by the owner to verify ownership.\\n     */\\n    function createSafe(\\n        TokenRequest calldata request,\\n        bytes calldata signature,\\n        address englishOwnerAdder,\\n        bytes calldata firstTransaction\\n    ) public {\\n        require(\\n            ownerToSafe[request.owner] == address(0),\\n            \\\"Safe already exists for owner\\\"\\n        );\\n        require(authenticate(request, signature));\\n\\n        address[] memory owners = new address[](1);\\n        owners[0] = request.owner;\\n\\n        // console.log(\\\"--handler\\\", _setupHandler, iToHex(abi.encodeWithSignature(\\\"setup()\\\")), _defaultFallackhandler);\\n        // console.log(\\\"--signer\\\", request.owner);\\n        bytes memory initializer = abi.encodeWithSignature(\\n            \\\"setup(address[],uint256,address,bytes,address,address,uint256,address)\\\",\\n            owners, // set the owner and first device addresses\\n            uint256(1), // set the number of required confirmations (threshhold) to 1\\n            _setupHandler, // setupModules address\\n            abi.encodeWithSignature(\\\"setup()\\\"), // setupModules data\\n            _defaultFallackhandler, // set the default fallback handler\\n            address(0), // set the payment token address\\n            uint256(0), // set the payment amount to 0\\n            address(0) // set the payment fee receiver address\\n        );\\n\\n        address proxyAddr = IProxyFactory(_gnosisSafeProxyFactory)\\n            .createProxyWithNonce(\\n                _gnosisSafeContract,\\n                initializer,\\n                block.chainid\\n            );\\n\\n        if (request.device != address(0)) {\\n            IEnglishOwnerAdder(englishOwnerAdder).addOwner(\\n                proxyAddr,\\n                request,\\n                signature\\n            );\\n        }\\n\\n        ownerToSafe[request.owner] = proxyAddr;\\n        safeToOwner[proxyAddr] = request.owner;\\n\\n        (bool success,) = proxyAddr.call(firstTransaction);\\n        require(success, \\\"First transaction failed\\\");\\n    }\\n\\n    function iToHex(bytes memory buffer) public pure returns (string memory) {\\n\\n        // Fixed buffer size for hexadecimal convertion\\n        bytes memory converted = new bytes(buffer.length * 2);\\n\\n        bytes memory _base = \\\"0123456789abcdef\\\";\\n\\n        for (uint256 i = 0; i < buffer.length; i++) {\\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n        }\\n\\n        return string(abi.encodePacked(\\\"0x\\\", converted));\\n    }\\n}\\n\\n// async walletAddressForUser(user:Address):Promise<Address> {\\n//     const setupData = await setupDataForUser(user)\\n\\n//     const salt = utils.keccak256(utils.solidityPack(['bytes', 'uint256'], [utils.keccak256(setupData), this.chainId]))\\n//     const initCode = utils.solidityKeccak256(['bytes', 'bytes'], [await this.proxyFactory.proxyCreationCode(), utils.defaultAbiCoder.encode(['address'], [MASTER_COPY_ADDR])])\\n\\n//     const addr = utils.getCreate2Address(this.proxyFactory.address, salt, initCode)\\n//     return addr.toLowerCase()\\n//   }\\n\",\"keccak256\":\"0xc5ba8b8787f10fe1f9f0f54596287a52e7a22797d33242cb3d93f3ee102ede71\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisSafe.sol\":{\"content\":\"pragma solidity ^0.8.19;\\n\\ncontract Enum {\\n    enum Operation {\\n        Call,\\n        DelegateCall\\n    }\\n}\\n\\ninterface GnosisSafe {\\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes calldata data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    function addOwnerWithThreshold(address owner, uint256 threshold) external;\\n    function removeOwner(address prevOwner, address owner, uint256 threshold) external;\\n\\n    function getThreshold() external view returns (uint256);\\n\\n    function getOwners() external view returns (address[] memory);\\n\\n    function isOwner(address owner) external view returns (bool);\\n\\n    function enableModule(address module) external;\\n}\\n\",\"keccak256\":\"0x6d5d793890962a6c0a2811940a21425aeb03b72a70f398367d2ff3d260f0ae4c\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806385e1f4d01161005b57806385e1f4d014610139578063b6ad16a814610157578063bebc479c14610188578063cb2e6043146101a657610088565b806306634e881461008d5780635e619a4a146100bd578063671ff786146100ed57806385442d5e1461011d575b600080fd5b6100a760048036038101906100a29190611647565b6101c4565b6040516100b49190611683565b60405180910390f35b6100d760048036038101906100d29190611647565b6101f7565b6040516100e49190611683565b60405180910390f35b610107600480360381019061010291906117e4565b61022a565b60405161011491906118ac565b60405180910390f35b61013760048036038101906101329190611952565b61044f565b005b610141610aae565b60405161014e91906118ac565b60405180910390f35b610171600480360381019061016c91906119f9565b610b3c565b60405161017f929190611aa3565b60405180910390f35b610190610bb0565b60405161019d91906118ac565b60405180910390f35b6101ae610c3e565b6040516101bb9190611ae2565b60405180910390f35b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060006002835161023c9190611b2c565b67ffffffffffffffff811115610255576102546116b9565b5b6040519080825280601f01601f1916602001820160405280156102875781602001600182028036833780820191505090505b50905060006040518060400160405280601081526020017f3031323334353637383961626364656600000000000000000000000000000000815250905060005b8451811015610425578182518683815181106102e6576102e5611b6e565b5b602001015160f81c60f81b60f81c60ff166103019190611bcc565b8151811061031257610311611b6e565b5b602001015160f81c60f81b8360028361032b9190611b2c565b8151811061033c5761033b611b6e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081825186838151811061038157610380611b6e565b5b602001015160f81c60f81b60f81c60ff1661039c9190611bfd565b815181106103ad576103ac611b6e565b5b602001015160f81c60f81b8360016002846103c89190611b2c565b6103d29190611c2e565b815181106103e3576103e2611b6e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061041d90611c62565b9150506102c7565b50816040516020016104379190611d48565b60405160208183030381529060405292505050919050565b600073ffffffffffffffffffffffffffffffffffffffff166003600088600001602081019061047e9190611647565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461052f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052690611db6565b60405180910390fd5b61053a868686610c44565b61054357600080fd5b6000600167ffffffffffffffff8111156105605761055f6116b9565b5b60405190808252806020026020018201604052801561058e5781602001602082028036833780820191505090505b5090508660000160208101906105a49190611647565b816000815181106105b8576105b7611b6e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008160017f00000000000000000000000000000000000000000000000000000000000000006040516024016040516020818303038152906040527fba0bba40000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050507f000000000000000000000000000000000000000000000000000000000000000060008060006040516024016106d8989796959493929190611ecf565b6040516020818303038152906040527fb63e800d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631688f0b97f000000000000000000000000000000000000000000000000000000000000000084466040518463ffffffff1660e01b81526004016107d693929190611f5b565b6020604051808303816000875af11580156107f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108199190611fae565b9050600073ffffffffffffffffffffffffffffffffffffffff168960200160208101906108469190611647565b73ffffffffffffffffffffffffffffffffffffffff16146108d3578573ffffffffffffffffffffffffffffffffffffffff1663724e59c3828b8b8b6040518563ffffffff1660e01b81526004016108a094939291906120bc565b600060405180830381600087803b1580156108ba57600080fd5b505af11580156108ce573d6000803e3d6000fd5b505050505b80600360008b60000160208101906108eb9190611647565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508860000160208101906109769190611647565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff168686604051610a1c929190612121565b6000604051808303816000865af19150503d8060008114610a59576040519150601f19603f3d011682016040523d82523d6000602084013e610a5e565b606091505b5050905080610aa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9990612186565b60405180910390fd5b50505050505050505050565b60028054610abb906121d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae7906121d5565b8015610b345780601f10610b0957610100808354040283529160200191610b34565b820191906000526020600020905b815481529060010190602001808311610b1757829003601f168201915b505050505081565b610b44611588565b606060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001600143610b969190612206565b815250915081610ba583610d85565b915091509250929050565b60008054610bbd906121d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610be9906121d5565b8015610c365780601f10610c0b57610100808354040283529160200191610c36565b820191906000526020600020905b815481529060010190602001808311610c1957829003601f168201915b505050505081565b60015481565b600080610c5085610dd9565b90506000610ca28286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610e03565b9050856000016020810190610cb79190611647565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1b90612286565b60405180910390fd5b60015443610d329190612206565b86604001351015610d78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6f906122f2565b60405180910390fd5b6001925050509392505050565b60606000610d968360000151610e2a565b610da38460200151610e2a565b610db08560400151610e57565b604051602001610dc394939291906124bf565b6040516020818303038152906040529050919050565b6000610dfc610df783803603810190610df29190612587565b610d85565b610f25565b9050919050565b6000806000610e128585610f60565b91509150610e1f81610fb1565b819250505092915050565b6060610e508273ffffffffffffffffffffffffffffffffffffffff16601460ff16611117565b9050919050565b606060006001610e6684611353565b01905060008167ffffffffffffffff811115610e8557610e846116b9565b5b6040519080825280601f01601f191660200182016040528015610eb75781602001600182028036833780820191505090505b509050600082602001820190505b600115610f1a578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610f0e57610f0d611b9d565b5b04945060008503610ec5575b819350505050919050565b6000610f318251610e57565b82604051602001610f43929190612600565b604051602081830303815290604052805190602001209050919050565b6000806041835103610fa15760008060006020860151925060408601519150606086015160001a9050610f95878285856114a6565b94509450505050610faa565b60006002915091505b9250929050565b60006004811115610fc557610fc461262f565b5b816004811115610fd857610fd761262f565b5b03156111145760016004811115610ff257610ff161262f565b5b8160048111156110055761100461262f565b5b03611045576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103c906126aa565b60405180910390fd5b600260048111156110595761105861262f565b5b81600481111561106c5761106b61262f565b5b036110ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a390612716565b60405180910390fd5b600360048111156110c0576110bf61262f565b5b8160048111156110d3576110d261262f565b5b03611113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110a906127a8565b60405180910390fd5b5b50565b60606000600283600261112a9190611b2c565b6111349190611c2e565b67ffffffffffffffff81111561114d5761114c6116b9565b5b6040519080825280601f01601f19166020018201604052801561117f5781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106111b7576111b6611b6e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061121b5761121a611b6e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261125b9190611b2c565b6112659190611c2e565b90505b6001811115611305577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106112a7576112a6611b6e565b5b1a60f81b8282815181106112be576112bd611b6e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806112fe906127c8565b9050611268565b5060008414611349576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113409061283d565b60405180910390fd5b8091505092915050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106113b1577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816113a7576113a6611b9d565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106113ee576d04ee2d6d415b85acef810000000083816113e4576113e3611b9d565b5b0492506020810190505b662386f26fc10000831061141d57662386f26fc10000838161141357611412611b9d565b5b0492506010810190505b6305f5e1008310611446576305f5e100838161143c5761143b611b9d565b5b0492506008810190505b612710831061146b57612710838161146157611460611b9d565b5b0492506004810190505b6064831061148e576064838161148457611483611b9d565b5b0492506002810190505b600a831061149d576001810190505b80915050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156114e157600060039150915061157f565b6000600187878787604051600081526020016040526040516115069493929190612892565b6020604051602081039080840390855afa158015611528573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115765760006001925092505061157f565b80600092509250505b94509492505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611614826115e9565b9050919050565b61162481611609565b811461162f57600080fd5b50565b6000813590506116418161161b565b92915050565b60006020828403121561165d5761165c6115df565b5b600061166b84828501611632565b91505092915050565b61167d81611609565b82525050565b60006020820190506116986000830184611674565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116f1826116a8565b810181811067ffffffffffffffff821117156117105761170f6116b9565b5b80604052505050565b60006117236115d5565b905061172f82826116e8565b919050565b600067ffffffffffffffff82111561174f5761174e6116b9565b5b611758826116a8565b9050602081019050919050565b82818337600083830152505050565b600061178761178284611734565b611719565b9050828152602081018484840111156117a3576117a26116a3565b5b6117ae848285611765565b509392505050565b600082601f8301126117cb576117ca61169e565b5b81356117db848260208601611774565b91505092915050565b6000602082840312156117fa576117f96115df565b5b600082013567ffffffffffffffff811115611818576118176115e4565b5b611824848285016117b6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561186757808201518184015260208101905061184c565b60008484015250505050565b600061187e8261182d565b6118888185611838565b9350611898818560208601611849565b6118a1816116a8565b840191505092915050565b600060208201905081810360008301526118c68184611873565b905092915050565b600080fd5b6000606082840312156118e9576118e86118ce565b5b81905092915050565b600080fd5b600080fd5b60008083601f8401126119125761191161169e565b5b8235905067ffffffffffffffff81111561192f5761192e6118f2565b5b60208301915083600182028301111561194b5761194a6118f7565b5b9250929050565b60008060008060008060c0878903121561196f5761196e6115df565b5b600061197d89828a016118d3565b965050606087013567ffffffffffffffff81111561199e5761199d6115e4565b5b6119aa89828a016118fc565b955095505060806119bd89828a01611632565b93505060a087013567ffffffffffffffff8111156119de576119dd6115e4565b5b6119ea89828a016118fc565b92509250509295509295509295565b60008060408385031215611a1057611a0f6115df565b5b6000611a1e85828601611632565b9250506020611a2f85828601611632565b9150509250929050565b611a4281611609565b82525050565b6000819050919050565b611a5b81611a48565b82525050565b606082016000820151611a776000850182611a39565b506020820151611a8a6020850182611a39565b506040820151611a9d6040850182611a52565b50505050565b6000608082019050611ab86000830185611a61565b8181036060830152611aca8184611873565b90509392505050565b611adc81611a48565b82525050565b6000602082019050611af76000830184611ad3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b3782611a48565b9150611b4283611a48565b9250828202611b5081611a48565b91508282048414831517611b6757611b66611afd565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611bd782611a48565b9150611be283611a48565b925082611bf257611bf1611b9d565b5b828204905092915050565b6000611c0882611a48565b9150611c1383611a48565b925082611c2357611c22611b9d565b5b828206905092915050565b6000611c3982611a48565b9150611c4483611a48565b9250828201905080821115611c5c57611c5b611afd565b5b92915050565b6000611c6d82611a48565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c9f57611c9e611afd565b5b600182019050919050565b600081905092915050565b7f3078000000000000000000000000000000000000000000000000000000000000600082015250565b6000611ceb600283611caa565b9150611cf682611cb5565b600282019050919050565b600081519050919050565b600081905092915050565b6000611d2282611d01565b611d2c8185611d0c565b9350611d3c818560208601611849565b80840191505092915050565b6000611d5382611cde565b9150611d5f8284611d17565b915081905092915050565b7f5361666520616c72656164792065786973747320666f72206f776e6572000000600082015250565b6000611da0601d83611838565b9150611dab82611d6a565b602082019050919050565b60006020820190508181036000830152611dcf81611d93565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611e0e8383611a39565b60208301905092915050565b6000602082019050919050565b6000611e3282611dd6565b611e3c8185611de1565b9350611e4783611df2565b8060005b83811015611e78578151611e5f8882611e02565b9750611e6a83611e1a565b925050600181019050611e4b565b5085935050505092915050565b600082825260208201905092915050565b6000611ea182611d01565b611eab8185611e85565b9350611ebb818560208601611849565b611ec4816116a8565b840191505092915050565b6000610100820190508181036000830152611eea818b611e27565b9050611ef9602083018a611ad3565b611f066040830189611674565b8181036060830152611f188188611e96565b9050611f276080830187611674565b611f3460a0830186611674565b611f4160c0830185611ad3565b611f4e60e0830184611674565b9998505050505050505050565b6000606082019050611f706000830186611674565b8181036020830152611f828185611e96565b9050611f916040830184611ad3565b949350505050565b600081519050611fa88161161b565b92915050565b600060208284031215611fc457611fc36115df565b5b6000611fd284828501611f99565b91505092915050565b6000611fea6020840184611632565b905092915050565b611ffb81611a48565b811461200657600080fd5b50565b60008135905061201881611ff2565b92915050565b600061202d6020840184612009565b905092915050565b606082016120466000830183611fdb565b6120536000850182611a39565b506120616020830183611fdb565b61206e6020850182611a39565b5061207c604083018361201e565b6120896040850182611a52565b50505050565b600061209b8385611e85565b93506120a8838584611765565b6120b1836116a8565b840190509392505050565b600060a0820190506120d16000830187611674565b6120de6020830186612035565b81810360808301526120f181848661208f565b905095945050505050565b60006121088385611d0c565b9350612115838584611765565b82840190509392505050565b600061212e8284866120fc565b91508190509392505050565b7f4669727374207472616e73616374696f6e206661696c65640000000000000000600082015250565b6000612170601883611838565b915061217b8261213a565b602082019050919050565b6000602082019050818103600083015261219f81612163565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806121ed57607f821691505b602082108103612200576121ff6121a6565b5b50919050565b600061221182611a48565b915061221c83611a48565b925082820390508181111561223457612233611afd565b5b92915050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000612270601183611838565b915061227b8261223a565b602082019050919050565b6000602082019050818103600083015261229f81612263565b9050919050565b7f5265717565737420697320746f6f206f6c640000000000000000000000000000600082015250565b60006122dc601283611838565b91506122e7826122a6565b602082019050919050565b6000602082019050818103600083015261230b816122cf565b9050919050565b60008190508160005260206000209050919050565b60008154612334816121d5565b61233e8186611caa565b94506001821660008114612359576001811461236e576123a1565b60ff19831686528115158202860193506123a1565b61237785612312565b60005b838110156123995781548189015260018201915060208101905061237a565b838801955050505b50505092915050565b7f0a0a4d653a200000000000000000000000000000000000000000000000000000600082015250565b60006123e0600683611caa565b91506123eb826123aa565b600682019050919050565b60006124018261182d565b61240b8185611caa565b935061241b818560208601611849565b80840191505092915050565b7f0a4465766963653a200000000000000000000000000000000000000000000000600082015250565b600061245d600983611caa565b915061246882612427565b600982019050919050565b7f0a4973737565642061743a200000000000000000000000000000000000000000600082015250565b60006124a9600c83611caa565b91506124b482612473565b600c82019050919050565b60006124cb8287612327565b91506124d6826123d3565b91506124e282866123f6565b91506124ed82612450565b91506124f982856123f6565b91506125048261249c565b915061251082846123f6565b915081905095945050505050565b600080fd5b6000606082840312156125395761253861251e565b5b6125436060611719565b9050600061255384828501611632565b600083015250602061256784828501611632565b602083015250604061257b84828501612009565b60408301525092915050565b60006060828403121561259d5761259c6115df565b5b60006125ab84828501612523565b91505092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000600082015250565b60006125ea601a83611caa565b91506125f5826125b4565b601a82019050919050565b600061260b826125dd565b915061261782856123f6565b91506126238284611d17565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000612694601883611838565b915061269f8261265e565b602082019050919050565b600060208201905081810360008301526126c381612687565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000612700601f83611838565b915061270b826126ca565b602082019050919050565b6000602082019050818103600083015261272f816126f3565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000612792602283611838565b915061279d82612736565b604082019050919050565b600060208201905081810360008301526127c181612785565b9050919050565b60006127d382611a48565b9150600082036127e6576127e5611afd565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000612827602083611838565b9150612832826127f1565b602082019050919050565b600060208201905081810360008301526128568161281a565b9050919050565b6000819050919050565b6128708161285d565b82525050565b600060ff82169050919050565b61288c81612876565b82525050565b60006080820190506128a76000830187612867565b6128b46020830186612883565b6128c16040830185612867565b6128ce6060830184612867565b9594505050505056fea26469706673582212207167cc10b3a91e5b789733762431f0ec1799c7f7c4cf19e08cf6b24a0968253764736f6c63430008130033",
  "devdoc": {
    "details": "A contract that allows a user to create a Gnosis Safe wallet by signing an English message.      It sets up a a safe by calling the SafeStetup.sol contract which adds the correct modules and the TokenRequest      device and owner as owners to the safe.",
    "kind": "dev",
    "methods": {
      "createSafe((address,address,uint256),bytes,address,bytes)": {
        "details": "Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.",
        "params": {
          "request": "The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.",
          "signature": "The signature signed by the owner to verify ownership."
        }
      }
    },
    "title": "WalletDeployer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1407,
        "contract": "contracts/WalletDeployer.sol:WalletDeployer",
        "label": "STATEMENT",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1410,
        "contract": "contracts/WalletDeployer.sol:WalletDeployer",
        "label": "lengthOfToken",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1611,
        "contract": "contracts/WalletDeployer.sol:WalletDeployer",
        "label": "CHAIN_ID",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1631,
        "contract": "contracts/WalletDeployer.sol:WalletDeployer",
        "label": "ownerToSafe",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1635,
        "contract": "contracts/WalletDeployer.sol:WalletDeployer",
        "label": "safeToOwner",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}