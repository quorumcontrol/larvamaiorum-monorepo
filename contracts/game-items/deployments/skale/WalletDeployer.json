{
  "address": "0x7F425D92f24806450f1673CafDaDfFa20f9F3f10",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gnosisSafeContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gnosisSafeProxyFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultFallbackHandler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "setupHandler",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CHAIN_ID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STATEMENT",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "device",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "issuedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenAuthenticated.TokenRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "createSafe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "device",
          "type": "address"
        }
      ],
      "name": "createTokenRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "device",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "issuedAt",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenAuthenticated.TokenRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lengthOfToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ownerToSafe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "safeToOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [
    "0xEF7fb5bB2fC8DE903094BA94ded511412894773c",
    "0xA324d3cB4fc6f8D0Aec25Acf68720ed308405e80",
    "0xD63ec75B8E5679e6A62D23eb10b9c8bb77838630",
    "0x6a55ec6C16CA5517e7D009ee568c771B5C6906Cf"
  ],
  "numDeployments": 1,
  "solcInputHash": "69bee98d5ceaf11b3e3d61ef42fe1119",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gnosisSafeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gnosisSafeProxyFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultFallbackHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"setupHandler\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CHAIN_ID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATEMENT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenAuthenticated.TokenRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"createSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"}],\"name\":\"createTokenRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"device\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issuedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenAuthenticated.TokenRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lengthOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToSafe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"safeToOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract that allows a user to create a Gnosis Safe wallet by signing an English message.\",\"kind\":\"dev\",\"methods\":{\"createSafe((address,address,uint256),bytes)\":{\"details\":\"Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.\",\"params\":{\"request\":\"The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.\",\"signature\":\"The signature signed by the owner to verify ownership.\"}}},\"title\":\"WalletDeployer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WalletDeployer.sol\":\"WalletDeployer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/TokenAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title TokenAuthenticated\\n * @dev allow a user to authenticate with a signed english token.\\n */\\ncontract TokenAuthenticated {\\n    string public STATEMENT;\\n\\n    uint256 public lengthOfToken = 15;\\n       \\n    struct TokenRequest {\\n        address owner;\\n        address device;\\n        uint256 issuedAt;\\n    }\\n\\n    constructor(string memory _statement) {\\n        STATEMENT = _statement;\\n    }\\n\\n    function _updateStatement(string memory newStatement) internal {\\n        STATEMENT = newStatement;\\n    }\\n\\n    function _updateLengthOfToken(uint256 newLength) internal {\\n        lengthOfToken = newLength;\\n    }\\n\\n    function authenticate(\\n        TokenRequest calldata request,\\n        bytes calldata signature\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = hashForToken(request);\\n        address signer = ECDSA.recover(msgHash, signature);\\n        require(signer == request.owner, \\\"invalid signature\\\");\\n        require(\\n            request.issuedAt >= block.number - lengthOfToken,\\n            \\\"Request is too old\\\"\\n        );\\n        return true;\\n    }\\n\\n    function createTokenRequest(\\n        address owner,\\n        address device\\n    ) public view returns (TokenRequest memory request, string memory) {\\n        request = TokenRequest({\\n            owner: owner,\\n            device: device,\\n            issuedAt: block.number - 1\\n        });\\n        return (request, stringToSign(request));\\n    }\\n\\n\\n    /**\\n     * @dev Returns the string to sign of the provided WalletCreateRequest.\\n     * @param request The WalletCreateRequest struct containing the owner address, device address, and issuedAt block number.\\n     */\\n    function stringToSign(\\n        TokenRequest memory request\\n    ) internal view returns (string memory) {\\n        return string(abi.encodePacked(\\n            STATEMENT,\\n            \\\"\\\\n\\\\nMe: \\\",\\n            Strings.toHexString(request.owner),\\n            \\\"\\\\nDevice: \\\",\\n            Strings.toHexString(request.device),\\n            \\\"\\\\nIssued at: \\\",\\n            Strings.toString(request.issuedAt)\\n        ));\\n    }\\n\\n    function hashForToken(\\n        TokenRequest calldata request\\n    ) internal view returns (bytes32) {\\n        return ECDSA.toEthSignedMessageHash(bytes(stringToSign(request)));\\n    }\\n}\",\"keccak256\":\"0x46bcf484ada1e1d321fd73afe7060e7e0b3930ba844bc32599fe88b7860715ce\",\"license\":\"MIT\"},\"contracts/WalletDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"./TokenAuthenticated.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ninterface IProxyFactory {\\n    function createProxyWithNonce(\\n        address _mastercopy,\\n        bytes memory initializer,\\n        uint256 saltNonce\\n    ) external returns (address proxy);\\n}\\n\\n/**\\n * @title WalletDeployer\\n * @dev A contract that allows a user to create a Gnosis Safe wallet by signing an English message.\\n */\\ncontract WalletDeployer is TokenAuthenticated {\\n    string public CHAIN_ID;\\n\\n    address private immutable _gnosisSafeContract;\\n    address private immutable _gnosisSafeProxyFactory;\\n    address private immutable _defaultFallackhandler;\\n\\n    address private immutable _setupHandler;\\n\\n    bytes4 private constant SETUP_DATA = bytes4(keccak256(\\\"setup()\\\"));\\n\\n    // a mapping of owner to safe address\\n    mapping(address => address) public ownerToSafe;\\n    mapping(address => address) public safeToOwner;\\n\\n    constructor(\\n        address gnosisSafeContract,\\n        address gnosisSafeProxyFactory,\\n        address defaultFallbackHandler,\\n        address setupHandler\\n    )\\n        TokenAuthenticated(\\n            \\\"I authorize this device to send transactions on my behalf.\\\"\\n        )\\n    {\\n        CHAIN_ID = Strings.toString(block.chainid);\\n        _gnosisSafeContract = gnosisSafeContract;\\n        _gnosisSafeProxyFactory = gnosisSafeProxyFactory;\\n        _defaultFallackhandler = defaultFallbackHandler;\\n        _setupHandler = setupHandler;\\n    }\\n\\n    /**\\n     * @dev Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.\\n     * @param request The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.\\n     * @param signature The signature signed by the owner to verify ownership.\\n     */\\n    function createSafe(\\n        TokenRequest calldata request,\\n        bytes calldata signature\\n    ) public {\\n        require(\\n            ownerToSafe[request.owner] == address(0),\\n            \\\"Safe already exists for owner\\\"\\n        );\\n        require(authenticate(request, signature));\\n\\n        // not sure exactly why, but it's important that this array is a memory address[] so that the initializer is encoded properly\\n        address[] memory owners;\\n        if (request.device == address(0)) {\\n            owners = new address[](1);\\n            owners[0] = request.owner;\\n        } else {\\n            owners = new address[](2);\\n            owners[0] = request.owner;\\n            owners[1] = request.device;\\n        }\\n\\n        bytes memory initializer = abi.encodeWithSignature(\\n            \\\"setup(address[],uint256,address,bytes,address,address,uint256,address)\\\",\\n            owners, // set the owner and first device addresses\\n            uint256(1), // set the number of required confirmations (threshhold) to 1\\n            _setupHandler, // setupModules address\\n            abi.encodeWithSignature(\\\"setup()\\\"), // setupModules data\\n            _defaultFallackhandler, // set the default fallback handler\\n            address(0), // set the payment token address\\n            address(0), // set the payment token address\\n            uint256(0), // set the payment amount to 0\\n            address(0) // set the payment fee receiver address\\n        );\\n\\n        address proxyAddr = IProxyFactory(_gnosisSafeProxyFactory)\\n            .createProxyWithNonce(_gnosisSafeContract, initializer, block.chainid);\\n\\n        ownerToSafe[request.owner] = proxyAddr;\\n        safeToOwner[proxyAddr] = request.owner;\\n    }\\n}\\n\",\"keccak256\":\"0x2a529184358206538af145bef48c5a0583bd82b46ccb162b8e63b9909ebb7df0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806385e1f4d01161005b57806385e1f4d0146100fe578063b6ad16a81461011c578063bebc479c1461014d578063cb2e60431461016b5761007d565b806306634e881461008257806324f669b4146100b25780635e619a4a146100ce575b600080fd5b61009c600480360381019061009791906113d8565b610189565b6040516100a99190611414565b60405180910390f35b6100cc60048036038101906100c791906114b8565b6101bc565b005b6100e860048036038101906100e391906113d8565b61080c565b6040516100f59190611414565b60405180910390f35b61010661083f565b60405161011391906115a8565b60405180910390f35b610136600480360381019061013191906115ca565b6108cd565b604051610144929190611674565b60405180910390f35b610155610941565b60405161016291906115a8565b60405180910390f35b6101736109cf565b60405161018091906116b3565b60405180910390f35b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600360008560000160208101906101eb91906113d8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461029c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102939061171a565b60405180910390fd5b6102a78383836109d5565b6102b057600080fd5b6060600073ffffffffffffffffffffffffffffffffffffffff168460200160208101906102dd91906113d8565b73ffffffffffffffffffffffffffffffffffffffff16036103aa57600167ffffffffffffffff8111156103135761031261173a565b5b6040519080825280602002602001820160405280156103415781602001602082028036833780820191505090505b50905083600001602081019061035791906113d8565b8160008151811061036b5761036a611769565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506104b9565b600267ffffffffffffffff8111156103c5576103c461173a565b5b6040519080825280602002602001820160405280156103f35781602001602082028036833780820191505090505b50905083600001602081019061040991906113d8565b8160008151811061041d5761041c611769565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083602001602081019061046a91906113d8565b8160018151811061047e5761047d611769565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b60008160017f00000000000000000000000000000000000000000000000000000000000000006040516024016040516020818303038152906040527fba0bba40000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050507f00000000000000000000000000000000000000000000000000000000000000006000806000806040516024016105a19998979695949392919061189c565b6040516020818303038152906040527fb63e800d000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631688f0b97f000000000000000000000000000000000000000000000000000000000000000084466040518463ffffffff1660e01b815260040161069f93929190611937565b6020604051808303816000875af11580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e2919061198a565b905080600360008860000160208101906106fc91906113d8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600001602081019061078791906113d8565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002805461084c906119e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610878906119e6565b80156108c55780601f1061089a576101008083540402835291602001916108c5565b820191906000526020600020905b8154815290600101906020018083116108a857829003601f168201915b505050505081565b6108d5611319565b606060405180606001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020016001436109279190611a46565b81525091508161093683610b16565b915091509250929050565b6000805461094e906119e6565b80601f016020809104026020016040519081016040528092919081815260200182805461097a906119e6565b80156109c75780601f1061099c576101008083540402835291602001916109c7565b820191906000526020600020905b8154815290600101906020018083116109aa57829003601f168201915b505050505081565b60015481565b6000806109e185610b6a565b90506000610a338286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610b94565b9050856000016020810190610a4891906113d8565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ab5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aac90611ac6565b60405180910390fd5b60015443610ac39190611a46565b86604001351015610b09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0090611b32565b60405180910390fd5b6001925050509392505050565b60606000610b278360000151610bbb565b610b348460200151610bbb565b610b418560400151610be8565b604051602001610b549493929190611d0a565b6040516020818303038152906040529050919050565b6000610b8d610b8883803603810190610b839190611e4a565b610b16565b610cb6565b9050919050565b6000806000610ba38585610cf1565b91509150610bb081610d42565b819250505092915050565b6060610be18273ffffffffffffffffffffffffffffffffffffffff16601460ff16610ea8565b9050919050565b606060006001610bf7846110e4565b01905060008167ffffffffffffffff811115610c1657610c1561173a565b5b6040519080825280601f01601f191660200182016040528015610c485781602001600182028036833780820191505090505b509050600082602001820190505b600115610cab578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610c9f57610c9e611e77565b5b04945060008503610c56575b819350505050919050565b6000610cc28251610be8565b82604051602001610cd4929190611f2e565b604051602081830303815290604052805190602001209050919050565b6000806041835103610d325760008060006020860151925060408601519150606086015160001a9050610d2687828585611237565b94509450505050610d3b565b60006002915091505b9250929050565b60006004811115610d5657610d55611f5d565b5b816004811115610d6957610d68611f5d565b5b0315610ea55760016004811115610d8357610d82611f5d565b5b816004811115610d9657610d95611f5d565b5b03610dd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dcd90611fd8565b60405180910390fd5b60026004811115610dea57610de9611f5d565b5b816004811115610dfd57610dfc611f5d565b5b03610e3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3490612044565b60405180910390fd5b60036004811115610e5157610e50611f5d565b5b816004811115610e6457610e63611f5d565b5b03610ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9b906120d6565b60405180910390fd5b5b50565b606060006002836002610ebb91906120f6565b610ec59190612138565b67ffffffffffffffff811115610ede57610edd61173a565b5b6040519080825280601f01601f191660200182016040528015610f105781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610f4857610f47611769565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610fac57610fab611769565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002610fec91906120f6565b610ff69190612138565b90505b6001811115611096577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061103857611037611769565b5b1a60f81b82828151811061104f5761104e611769565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061108f9061216c565b9050610ff9565b50600084146110da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d1906121e1565b60405180910390fd5b8091505092915050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611142577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161113857611137611e77565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061117f576d04ee2d6d415b85acef8100000000838161117557611174611e77565b5b0492506020810190505b662386f26fc1000083106111ae57662386f26fc1000083816111a4576111a3611e77565b5b0492506010810190505b6305f5e10083106111d7576305f5e10083816111cd576111cc611e77565b5b0492506008810190505b61271083106111fc5761271083816111f2576111f1611e77565b5b0492506004810190505b6064831061121f576064838161121557611214611e77565b5b0492506002810190505b600a831061122e576001810190505b80915050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611272576000600391509150611310565b6000600187878787604051600081526020016040526040516112979493929190612236565b6020604051602081039080840390855afa1580156112b9573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361130757600060019250925050611310565b80600092509250505b94509492505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113a58261137a565b9050919050565b6113b58161139a565b81146113c057600080fd5b50565b6000813590506113d2816113ac565b92915050565b6000602082840312156113ee576113ed611370565b5b60006113fc848285016113c3565b91505092915050565b61140e8161139a565b82525050565b60006020820190506114296000830184611405565b92915050565b600080fd5b60006060828403121561144a5761144961142f565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261147857611477611453565b5b8235905067ffffffffffffffff81111561149557611494611458565b5b6020830191508360018202830111156114b1576114b061145d565b5b9250929050565b6000806000608084860312156114d1576114d0611370565b5b60006114df86828701611434565b935050606084013567ffffffffffffffff811115611500576114ff611375565b5b61150c86828701611462565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611552578082015181840152602081019050611537565b60008484015250505050565b6000601f19601f8301169050919050565b600061157a82611518565b6115848185611523565b9350611594818560208601611534565b61159d8161155e565b840191505092915050565b600060208201905081810360008301526115c2818461156f565b905092915050565b600080604083850312156115e1576115e0611370565b5b60006115ef858286016113c3565b9250506020611600858286016113c3565b9150509250929050565b6116138161139a565b82525050565b6000819050919050565b61162c81611619565b82525050565b606082016000820151611648600085018261160a565b50602082015161165b602085018261160a565b50604082015161166e6040850182611623565b50505050565b60006080820190506116896000830185611632565b818103606083015261169b818461156f565b90509392505050565b6116ad81611619565b82525050565b60006020820190506116c860008301846116a4565b92915050565b7f5361666520616c72656164792065786973747320666f72206f776e6572000000600082015250565b6000611704601d83611523565b915061170f826116ce565b602082019050919050565b60006020820190508181036000830152611733816116f7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006117d0838361160a565b60208301905092915050565b6000602082019050919050565b60006117f482611798565b6117fe81856117a3565b9350611809836117b4565b8060005b8381101561183a57815161182188826117c4565b975061182c836117dc565b92505060018101905061180d565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b600061186e82611847565b6118788185611852565b9350611888818560208601611534565b6118918161155e565b840191505092915050565b60006101208201905081810360008301526118b7818c6117e9565b90506118c6602083018b6116a4565b6118d3604083018a611405565b81810360608301526118e58189611863565b90506118f46080830188611405565b61190160a0830187611405565b61190e60c0830186611405565b61191b60e08301856116a4565b611929610100830184611405565b9a9950505050505050505050565b600060608201905061194c6000830186611405565b818103602083015261195e8185611863565b905061196d60408301846116a4565b949350505050565b600081519050611984816113ac565b92915050565b6000602082840312156119a05761199f611370565b5b60006119ae84828501611975565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806119fe57607f821691505b602082108103611a1157611a106119b7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611a5182611619565b9150611a5c83611619565b9250828203905081811115611a7457611a73611a17565b5b92915050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000611ab0601183611523565b9150611abb82611a7a565b602082019050919050565b60006020820190508181036000830152611adf81611aa3565b9050919050565b7f5265717565737420697320746f6f206f6c640000000000000000000000000000600082015250565b6000611b1c601283611523565b9150611b2782611ae6565b602082019050919050565b60006020820190508181036000830152611b4b81611b0f565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154611b7f816119e6565b611b898186611b52565b94506001821660008114611ba45760018114611bb957611bec565b60ff1983168652811515820286019350611bec565b611bc285611b5d565b60005b83811015611be457815481890152600182019150602081019050611bc5565b838801955050505b50505092915050565b7f0a0a4d653a200000000000000000000000000000000000000000000000000000600082015250565b6000611c2b600683611b52565b9150611c3682611bf5565b600682019050919050565b6000611c4c82611518565b611c568185611b52565b9350611c66818560208601611534565b80840191505092915050565b7f0a4465766963653a200000000000000000000000000000000000000000000000600082015250565b6000611ca8600983611b52565b9150611cb382611c72565b600982019050919050565b7f0a4973737565642061743a200000000000000000000000000000000000000000600082015250565b6000611cf4600c83611b52565b9150611cff82611cbe565b600c82019050919050565b6000611d168287611b72565b9150611d2182611c1e565b9150611d2d8286611c41565b9150611d3882611c9b565b9150611d448285611c41565b9150611d4f82611ce7565b9150611d5b8284611c41565b915081905095945050505050565b600080fd5b611d778261155e565b810181811067ffffffffffffffff82111715611d9657611d9561173a565b5b80604052505050565b6000611da9611366565b9050611db58282611d6e565b919050565b611dc381611619565b8114611dce57600080fd5b50565b600081359050611de081611dba565b92915050565b600060608284031215611dfc57611dfb611d69565b5b611e066060611d9f565b90506000611e16848285016113c3565b6000830152506020611e2a848285016113c3565b6020830152506040611e3e84828501611dd1565b60408301525092915050565b600060608284031215611e6057611e5f611370565b5b6000611e6e84828501611de6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000600082015250565b6000611edc601a83611b52565b9150611ee782611ea6565b601a82019050919050565b600081905092915050565b6000611f0882611847565b611f128185611ef2565b9350611f22818560208601611534565b80840191505092915050565b6000611f3982611ecf565b9150611f458285611c41565b9150611f518284611efd565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611fc2601883611523565b9150611fcd82611f8c565b602082019050919050565b60006020820190508181036000830152611ff181611fb5565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061202e601f83611523565b915061203982611ff8565b602082019050919050565b6000602082019050818103600083015261205d81612021565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006120c0602283611523565b91506120cb82612064565b604082019050919050565b600060208201905081810360008301526120ef816120b3565b9050919050565b600061210182611619565b915061210c83611619565b925082820261211a81611619565b9150828204841483151761213157612130611a17565b5b5092915050565b600061214382611619565b915061214e83611619565b925082820190508082111561216657612165611a17565b5b92915050565b600061217782611619565b91506000820361218a57612189611a17565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006121cb602083611523565b91506121d682612195565b602082019050919050565b600060208201905081810360008301526121fa816121be565b9050919050565b6000819050919050565b61221481612201565b82525050565b600060ff82169050919050565b6122308161221a565b82525050565b600060808201905061224b600083018761220b565b6122586020830186612227565b612265604083018561220b565b612272606083018461220b565b9594505050505056fea264697066735822122046a9a863737b243d682ed203d03afe627eb0e3ffd3cb8848f512779fb1caa1a664736f6c63430008130033",
  "devdoc": {
    "details": "A contract that allows a user to create a Gnosis Safe wallet by signing an English message.",
    "kind": "dev",
    "methods": {
      "createSafe((address,address,uint256),bytes)": {
        "details": "Creates a Gnosis Safe wallet using the provided WalletCreateRequest and signature.",
        "params": {
          "request": "The WalletCreateRequest struct containing the owner address, first device address, and issuedAt block number.",
          "signature": "The signature signed by the owner to verify ownership."
        }
      }
    },
    "title": "WalletDeployer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1491,
        "contract": "contracts/WalletDeployer.sol:WalletDeployer",
        "label": "STATEMENT",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1494,
        "contract": "contracts/WalletDeployer.sol:WalletDeployer",
        "label": "lengthOfToken",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1683,
        "contract": "contracts/WalletDeployer.sol:WalletDeployer",
        "label": "CHAIN_ID",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1703,
        "contract": "contracts/WalletDeployer.sol:WalletDeployer",
        "label": "ownerToSafe",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1707,
        "contract": "contracts/WalletDeployer.sol:WalletDeployer",
        "label": "safeToOwner",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}