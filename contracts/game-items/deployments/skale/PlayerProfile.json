{
  "address": "0xaA3BB07dE9AbBD2bE9f54DD1C2aA3E6BF8DD0b7d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NameAlreadyTaken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOneProfilePerAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            }
          ],
          "internalType": "struct PlayerProfile.Metadata",
          "name": "meta",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            }
          ],
          "internalType": "struct PlayerProfile.Metadata",
          "name": "meta",
          "type": "tuple"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            }
          ],
          "internalType": "struct PlayerProfile.Metadata",
          "name": "meta",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "setMetadata",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [
    "0x6DE3D3747D54d0Adc11e5Cf678D4045B0441D332"
  ],
  "numDeployments": 1,
  "solcInputHash": "64b4d4523354b6988d38ba935f8245ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NameAlreadyTaken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOneProfilePerAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"}],\"internalType\":\"struct PlayerProfile.Metadata\",\"name\":\"meta\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"}],\"internalType\":\"struct PlayerProfile.Metadata\",\"name\":\"meta\",\"type\":\"tuple\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"}],\"internalType\":\"struct PlayerProfile.Metadata\",\"name\":\"meta\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PlayerProfile.sol\":\"PlayerProfile\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x52da94e59d870f54ca0eb4f485c3d9602011f668ba34d72c88124a1496ebaab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/PlayerProfile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"solidity-json-writer/contracts/JsonWriter.sol\\\";\\n\\ncontract PlayerProfile is ERC721, ERC721Enumerable, Pausable, AccessControl, ERC721Burnable {\\n    using Counters for Counters.Counter;\\n    using JsonWriter for JsonWriter.Json;\\n\\n    error UnauthorizedError();\\n    error NameAlreadyTaken();\\n    error OnlyOneProfilePerAddress();\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    Counters.Counter private _tokenIdCounter;\\n\\n    mapping(bytes32 => bool) private _usedNames;\\n\\n    mapping(uint256 => Metadata) private _metadata;\\n\\n    struct Metadata {\\n        string name;\\n        string description;\\n        string image;\\n        string animationUrl; // The glb file\\n    }\\n\\n    constructor(address initialAdmin) ERC721(\\\"PlayerProfile\\\", \\\"CCPP\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialAdmin);\\n        _grantRole(PAUSER_ROLE, initialAdmin);\\n        _grantRole(MINTER_ROLE, initialAdmin);\\n    }\\n\\n    function pause() public onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function safeMint(Metadata calldata meta) public {\\n        address to = msg.sender;\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n        _metadata[tokenId] = meta;\\n        if(balanceOf(to) > 1) {\\n            revert OnlyOneProfilePerAddress();\\n        }\\n    }\\n\\n    function uri(uint256 tokenID) public view returns (string memory) {\\n        JsonWriter.Json memory writer;\\n        PlayerProfile.Metadata memory meta = _metadata[tokenID];\\n\\n        writer = writer.writeStartObject();\\n        writer = writer.writeStringProperty(\\\"name\\\", meta.name);\\n        writer = writer.writeStringProperty(\\\"description\\\", meta.description);\\n        writer = writer.writeStringProperty(\\\"image\\\", meta.image);\\n        writer = writer.writeStringProperty(\\\"animation_url\\\", meta.animationUrl);\\n        writer = writer.writeEndObject();\\n\\n        return\\n            string.concat(\\\"data:application/json;base64,\\\", Base64.encode(bytes(writer.value)));\\n    }\\n\\n    function setMetadata(Metadata calldata meta, uint256 tokenID) public {\\n        if(!hasRole(MINTER_ROLE, msg.sender) && ownerOf(tokenID) != msg.sender) {\\n            revert UnauthorizedError();\\n        }\\n        Metadata storage existing = _metadata[tokenID];\\n        \\n        _usedNames[keccak256(bytes(existing.name))] = false;\\n        \\n        if(_usedNames[keccak256(bytes(meta.name))]) {\\n            revert NameAlreadyTaken();\\n        }\\n        _metadata[tokenID] = meta;\\n    }\\n\\n    function metadata(uint256 tokenID)\\n        public\\n        view\\n        returns (\\n            Metadata memory meta\\n        )\\n    {\\n        return _metadata[tokenID];\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)\\n        internal\\n        whenNotPaused\\n        override(ERC721, ERC721Enumerable)\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xe20a897b3b5deec7af5e63d69f9eb332e1511c8df7a6ad7bab6e08a60e68a094\",\"license\":\"MIT\"},\"solidity-json-writer/contracts/JsonWriter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary JsonWriter {\\r\\n\\r\\n    using JsonWriter for string;\\r\\n\\r\\n    struct Json {\\r\\n        int256 depthBitTracker;\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    bytes1 constant BACKSLASH = bytes1(uint8(92));\\r\\n    bytes1 constant BACKSPACE = bytes1(uint8(8));\\r\\n    bytes1 constant CARRIAGE_RETURN = bytes1(uint8(13));\\r\\n    bytes1 constant DOUBLE_QUOTE = bytes1(uint8(34));\\r\\n    bytes1 constant FORM_FEED = bytes1(uint8(12));\\r\\n    bytes1 constant FRONTSLASH = bytes1(uint8(47));\\r\\n    bytes1 constant HORIZONTAL_TAB = bytes1(uint8(9));\\r\\n    bytes1 constant NEWLINE = bytes1(uint8(10));\\r\\n\\r\\n    string constant TRUE = \\\"true\\\";\\r\\n    string constant FALSE = \\\"false\\\";\\r\\n    bytes1 constant OPEN_BRACE = \\\"{\\\";\\r\\n    bytes1 constant CLOSED_BRACE = \\\"}\\\";\\r\\n    bytes1 constant OPEN_BRACKET = \\\"[\\\";\\r\\n    bytes1 constant CLOSED_BRACKET = \\\"]\\\";\\r\\n    bytes1 constant LIST_SEPARATOR = \\\",\\\";\\r\\n\\r\\n    int256 constant MAX_INT256 = type(int256).max;\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the beginning of a JSON array.\\r\\n     */\\r\\n    function writeStartArray(Json memory json) \\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        return writeStart(json, OPEN_BRACKET);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the beginning of a JSON array with a property name as the key.\\r\\n     */\\r\\n    function writeStartArray(Json memory json, string memory propertyName)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        return writeStart(json, propertyName, OPEN_BRACKET);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the beginning of a JSON object.\\r\\n     */\\r\\n    function writeStartObject(Json memory json)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        return writeStart(json, OPEN_BRACE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the beginning of a JSON object with a property name as the key.\\r\\n     */\\r\\n    function writeStartObject(Json memory json, string memory propertyName)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        return writeStart(json, propertyName, OPEN_BRACE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the end of a JSON array.\\r\\n     */\\r\\n    function writeEndArray(Json memory json)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        return writeEnd(json, CLOSED_BRACKET);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the end of a JSON object.\\r\\n     */\\r\\n    function writeEndObject(Json memory json)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        return writeEnd(json, CLOSED_BRACE);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the property name and address value (as a JSON string) as part of a name/value pair of a JSON object.\\r\\n     */\\r\\n    function writeAddressProperty(\\r\\n        Json memory json,\\r\\n        string memory propertyName,\\r\\n        address value\\r\\n    ) internal pure returns (Json memory) {\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, '\\\"', propertyName, '\\\": \\\"', addressToString(value), '\\\"'));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, '\\\"', propertyName, '\\\": \\\"', addressToString(value), '\\\"'));\\r\\n        }\\r\\n\\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the address value (as a JSON string) as an element of a JSON array.\\r\\n     */\\r\\n    function writeAddressValue(Json memory json, address value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, '\\\"', addressToString(value), '\\\"'));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, '\\\"', addressToString(value), '\\\"'));\\r\\n        }\\r\\n\\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the property name and boolean value (as a JSON literal \\\"true\\\" or \\\"false\\\") as part of a name/value pair of a JSON object.\\r\\n     */\\r\\n    function writeBooleanProperty(\\r\\n        Json memory json,\\r\\n        string memory propertyName,\\r\\n        bool value\\r\\n    ) internal pure returns (Json memory) {\\r\\n        string memory strValue;\\r\\n        if (value) {\\r\\n            strValue = TRUE;\\r\\n        } else {\\r\\n            strValue = FALSE;\\r\\n        }\\r\\n\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, '\\\"', propertyName, '\\\": ', strValue));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, '\\\"', propertyName, '\\\": ', strValue));\\r\\n        }\\r\\n\\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the boolean value (as a JSON literal \\\"true\\\" or \\\"false\\\") as an element of a JSON array.\\r\\n     */\\r\\n    function writeBooleanValue(Json memory json, bool value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        string memory strValue;\\r\\n        if (value) {\\r\\n            strValue = TRUE;\\r\\n        } else {\\r\\n            strValue = FALSE;\\r\\n        }\\r\\n\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, strValue));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, strValue));\\r\\n        }\\r\\n        \\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the property name and int value (as a JSON number) as part of a name/value pair of a JSON object.\\r\\n     */\\r\\n    function writeIntProperty(\\r\\n        Json memory json,\\r\\n        string memory propertyName,\\r\\n        int256 value\\r\\n    ) internal pure returns (Json memory) {\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, '\\\"', propertyName, '\\\": ', intToString(value)));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, '\\\"', propertyName, '\\\": ', intToString(value)));\\r\\n        }\\r\\n\\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the int value (as a JSON number) as an element of a JSON array.\\r\\n     */\\r\\n    function writeIntValue(Json memory json, int256 value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, intToString(value)));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, intToString(value)));\\r\\n        }\\r\\n        \\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the property name and value of null as part of a name/value pair of a JSON object.\\r\\n     */\\r\\n    function writeNullProperty(Json memory json, string memory propertyName)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, '\\\"', propertyName, '\\\": null'));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, '\\\"', propertyName, '\\\": null'));\\r\\n        }\\r\\n\\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the value of null as an element of a JSON array.\\r\\n     */\\r\\n    function writeNullValue(Json memory json)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, \\\"null\\\"));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, \\\"null\\\"));\\r\\n        }\\r\\n\\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the string text value (as a JSON string) as an element of a JSON array.\\r\\n     */\\r\\n    function writeStringProperty(\\r\\n        Json memory json,\\r\\n        string memory propertyName,\\r\\n        string memory value\\r\\n    ) internal pure returns (Json memory) {\\r\\n        string memory jsonEscapedString = escapeJsonString(value);\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, '\\\"', propertyName, '\\\": \\\"', jsonEscapedString, '\\\"'));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, '\\\"', propertyName, '\\\": \\\"', jsonEscapedString, '\\\"'));\\r\\n        }\\r\\n\\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.\\r\\n     */\\r\\n    function writeStringValue(Json memory json, string memory value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        string memory jsonEscapedString = escapeJsonString(value);\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, '\\\"', jsonEscapedString, '\\\"'));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, '\\\"', jsonEscapedString, '\\\"'));\\r\\n        }\\r\\n\\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the property name and uint value (as a JSON number) as part of a name/value pair of a JSON object.\\r\\n     */\\r\\n    function writeUintProperty(\\r\\n        Json memory json,\\r\\n        string memory propertyName,\\r\\n        uint256 value\\r\\n    ) internal pure returns (Json memory) {\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, '\\\"', propertyName, '\\\": ', uintToString(value)));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, '\\\"', propertyName, '\\\": ', uintToString(value)));\\r\\n        }\\r\\n\\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the uint value (as a JSON number) as an element of a JSON array.\\r\\n     */\\r\\n    function writeUintValue(Json memory json, uint256 value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, uintToString(value)));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, uintToString(value)));\\r\\n        }\\r\\n\\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the beginning of a JSON array or object based on the token parameter.\\r\\n     */\\r\\n    function writeStart(Json memory json, bytes1 token)\\r\\n        private\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, token));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, token));\\r\\n        }\\r\\n\\r\\n        json.depthBitTracker &= MAX_INT256;\\r\\n        json.depthBitTracker++;\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the beginning of a JSON array or object based on the token parameter with a property name as the key.\\r\\n     */\\r\\n    function writeStart(\\r\\n        Json memory json,\\r\\n        string memory propertyName,\\r\\n        bytes1 token\\r\\n    ) private pure returns (Json memory) {\\r\\n        if (json.depthBitTracker < 0) {\\r\\n            json.value = string(abi.encodePacked(json.value, LIST_SEPARATOR, '\\\"', propertyName, '\\\": ', token));\\r\\n        } else {\\r\\n            json.value = string(abi.encodePacked(json.value, '\\\"', propertyName, '\\\": ', token));\\r\\n        }\\r\\n\\r\\n        json.depthBitTracker &= MAX_INT256;\\r\\n        json.depthBitTracker++;\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Writes the end of a JSON array or object based on the token parameter.\\r\\n     */\\r\\n    function writeEnd(Json memory json, bytes1 token)\\r\\n        private\\r\\n        pure\\r\\n        returns (Json memory)\\r\\n    {\\r\\n        json.value = string(abi.encodePacked(json.value, token));\\r\\n        json.depthBitTracker = setListSeparatorFlag(json);\\r\\n        \\r\\n        if (getCurrentDepth(json) != 0) {\\r\\n            json.depthBitTracker--;\\r\\n        }\\r\\n\\r\\n        return json;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Escapes any characters that required by JSON to be escaped.\\r\\n     */\\r\\n    function escapeJsonString(string memory value)\\r\\n        private\\r\\n        pure\\r\\n        returns (string memory str)\\r\\n    {\\r\\n        bytes memory b = bytes(value);\\r\\n        bool foundEscapeChars;\\r\\n\\r\\n        for (uint256 i; i < b.length; i++) {\\r\\n            if (b[i] == BACKSLASH) {\\r\\n                foundEscapeChars = true;\\r\\n                break;\\r\\n            } else if (b[i] == DOUBLE_QUOTE) {\\r\\n                foundEscapeChars = true;\\r\\n                break;\\r\\n            } else if (b[i] == FRONTSLASH) {\\r\\n                foundEscapeChars = true;\\r\\n                break;\\r\\n            } else if (b[i] == HORIZONTAL_TAB) {\\r\\n                foundEscapeChars = true;\\r\\n                break;\\r\\n            } else if (b[i] == FORM_FEED) {\\r\\n                foundEscapeChars = true;\\r\\n                break;\\r\\n            } else if (b[i] == NEWLINE) {\\r\\n                foundEscapeChars = true;\\r\\n                break;\\r\\n            } else if (b[i] == CARRIAGE_RETURN) {\\r\\n                foundEscapeChars = true;\\r\\n                break;\\r\\n            } else if (b[i] == BACKSPACE) {\\r\\n                foundEscapeChars = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!foundEscapeChars) {\\r\\n            return value;\\r\\n        }\\r\\n\\r\\n        for (uint256 i; i < b.length; i++) {\\r\\n            if (b[i] == BACKSLASH) {\\r\\n                str = string(abi.encodePacked(str, \\\"\\\\\\\\\\\\\\\\\\\"));\\r\\n            } else if (b[i] == DOUBLE_QUOTE) {\\r\\n                str = string(abi.encodePacked(str, '\\\\\\\\\\\"'));\\r\\n            } else if (b[i] == FRONTSLASH) {\\r\\n                str = string(abi.encodePacked(str, \\\"\\\\\\\\/\\\"));\\r\\n            } else if (b[i] == HORIZONTAL_TAB) {\\r\\n                str = string(abi.encodePacked(str, \\\"\\\\\\\\t\\\"));\\r\\n            } else if (b[i] == FORM_FEED) {\\r\\n                str = string(abi.encodePacked(str, \\\"\\\\\\\\f\\\"));\\r\\n            } else if (b[i] == NEWLINE) {\\r\\n                str = string(abi.encodePacked(str, \\\"\\\\\\\\n\\\"));\\r\\n            } else if (b[i] == CARRIAGE_RETURN) {\\r\\n                str = string(abi.encodePacked(str, \\\"\\\\\\\\r\\\"));\\r\\n            } else if (b[i] == BACKSPACE) {\\r\\n                str = string(abi.encodePacked(str, \\\"\\\\\\\\b\\\"));\\r\\n            } else {\\r\\n                str = string(abi.encodePacked(str, b[i]));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return str;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tracks the recursive depth of the nested objects / arrays within the JSON text\\r\\n     * written so far. This provides the depth of the current token.\\r\\n     */\\r\\n    function getCurrentDepth(Json memory json) private pure returns (int256) {\\r\\n        return json.depthBitTracker & MAX_INT256;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The highest order bit of json.depthBitTracker is used to discern whether we are writing the first item in a list or not.\\r\\n     * if (json.depthBitTracker >> 255) == 1, add a list separator before writing the item\\r\\n     * else, no list separator is needed since we are writing the first item.\\r\\n     */\\r\\n    function setListSeparatorFlag(Json memory json)\\r\\n        private\\r\\n        pure\\r\\n        returns (int256)\\r\\n    {\\r\\n        return json.depthBitTracker | (int256(1) << 255);\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Converts an address to a string.\\r\\n     */\\r\\n    function addressToString(address _address)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        bytes32 value = bytes32(uint256(uint160(_address)));\\r\\n        bytes16 alphabet = \\\"0123456789abcdef\\\";\\r\\n\\r\\n        bytes memory str = new bytes(42);\\r\\n        str[0] = \\\"0\\\";\\r\\n        str[1] = \\\"x\\\";\\r\\n        for (uint256 i; i < 20; i++) {\\r\\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\r\\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\r\\n        }\\r\\n\\r\\n        return string(str);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an int to a string.\\r\\n     */\\r\\n    function intToString(int256 i) internal pure returns (string memory) {\\r\\n        if (i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n\\r\\n        if (i == type(int256).min) {\\r\\n            // hard-coded since int256 min value can't be converted to unsigned\\r\\n            return \\\"-57896044618658097711785492504343953926634992332820282019728792003956564819968\\\"; \\r\\n        }\\r\\n\\r\\n        bool negative = i < 0;\\r\\n        uint256 len;\\r\\n        uint256 j;\\r\\n        if(!negative) {\\r\\n            j = uint256(i);\\r\\n        } else {\\r\\n            j = uint256(-i);\\r\\n            ++len; // make room for '-' sign\\r\\n        }\\r\\n        \\r\\n        uint256 l = j;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint256 k = len;\\r\\n        while (l != 0) {\\r\\n            bstr[--k] = bytes1((48 + uint8(l - (l / 10) * 10)));\\r\\n            l /= 10;\\r\\n        }\\r\\n\\r\\n        if (negative) {\\r\\n            bstr[0] = \\\"-\\\"; // prepend '-'\\r\\n        }\\r\\n\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a uint to a string.\\r\\n     */\\r\\n    function uintToString(uint256 _i) internal pure returns (string memory) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n\\r\\n        uint256 j = _i;\\r\\n        uint256 len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint256 k = len;\\r\\n        while (_i != 0) {\\r\\n            bstr[--k] = bytes1((48 + uint8(_i - (_i / 10) * 10)));\\r\\n            _i /= 10;\\r\\n        }\\r\\n\\r\\n        return string(bstr);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x87f6698953c703c625f979700629e772c9c4af55f3231a28f2be85c5c870d2fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003a4a38038062003a4a8339810160408190526200003491620001b5565b6040518060400160405280600d81526020016c506c6179657250726f66696c6560981b815250604051806040016040528060048152602001630434350560e41b81525081600090816200008891906200028c565b5060016200009782826200028c565b5050600a805460ff1916905550620000b160008262000110565b620000dd7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a8262000110565b620001097f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a68262000110565b5062000358565b6000828152600b602090815260408083206001600160a01b038516845290915290205460ff16620001b1576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001703390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600060208284031215620001c857600080fd5b81516001600160a01b0381168114620001e057600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200021257607f821691505b6020821081036200023357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200028757600081815260208120601f850160051c81016020861015620002625750805b601f850160051c820191505b8181101562000283578281556001016200026e565b5050505b505050565b81516001600160401b03811115620002a857620002a8620001e7565b620002c081620002b98454620001fd565b8462000239565b602080601f831160018114620002f85760008415620002df5750858301515b600019600386901b1c1916600185901b17855562000283565b600085815260208120601f198616915b82811015620003295788860151825594840194600190910190840162000308565b5085821015620003485787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6136e280620003686000396000f3fe608060405234801561001057600080fd5b50600436106101805760003560e01c806301ffc9a71461018557806306fdde03146101ad578063081812fc146101c2578063095ea7b3146101e25780630e89341c146101f757806318160ddd1461020a57806323b872dd1461021c578063248a9ca31461022f5780632f2ff15d146102425780632f745c591461025557806336568abe146102685780633f4ba83a1461027b57806342842e0e1461028357806342966c68146102965780634f6ccce7146102a95780635c975abb146102bc5780636352211e146102c75780636a2e60db146102da57806370a08231146102ed5780638456cb591461030057806391d148541461030857806395d89b411461031b578063a217fddf14610323578063a22cb4651461032b578063b88d4fde1461033e578063c87b56dd14610351578063d2e21bab14610364578063d539139314610377578063d547741f1461038c578063e3684e391461039f578063e63ab1e9146103bf578063e985e9c5146103d4575b600080fd5b6101986101933660046128f7565b6103e7565b60405190151581526020015b60405180910390f35b6101b56103f8565b6040516101a49190612964565b6101d56101d0366004612977565b61048a565b6040516101a49190612990565b6101f56101f03660046129c0565b6104b1565b005b6101b5610205366004612977565b6105cb565b6008545b6040519081526020016101a4565b6101f561022a3660046129ea565b610959565b61020e61023d366004612977565b61098b565b6101f5610250366004612a26565b6109a0565b61020e6102633660046129c0565b6109bc565b6101f5610276366004612a26565b610a52565b6101f5610ad0565b6101f56102913660046129ea565b610af3565b6101f56102a4366004612977565b610b0e565b61020e6102b7366004612977565b610b3c565b600a5460ff16610198565b6101d56102d5366004612977565b610bcf565b6101f56102e8366004612a6a565b610c03565b61020e6102fb366004612a9e565b610c70565b6101f5610cf6565b610198610316366004612a26565b610d16565b6101b5610d41565b61020e600081565b6101f5610339366004612ab9565b610d50565b6101f561034c366004612b0b565b610d5b565b6101b561035f366004612977565b610d93565b6101f5610372366004612be6565b610e07565b61020e60008051602061366d83398151915281565b6101f561039a366004612a26565b610f21565b6103b26103ad366004612977565b610f3d565b6040516101a49190612c2a565b61020e60008051602061364d83398151915281565b6101986103e2366004612ca8565b6111cf565b60006103f2826111fd565b92915050565b60606000805461040790612cd2565b80601f016020809104026020016040519081016040528092919081815260200182805461043390612cd2565b80156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b5050505050905090565b600061049582611222565b506000908152600460205260409020546001600160a01b031690565b60006104bc82610bcf565b9050806001600160a01b0316836001600160a01b03160361052e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061054a575061054a81336111cf565b6105bc5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610525565b6105c68383611247565b505050565b60606105d56128c7565b6000838152600e60205260408082208151608081019092528054829082906105fc90612cd2565b80601f016020809104026020016040519081016040528092919081815260200182805461062890612cd2565b80156106755780601f1061064a57610100808354040283529160200191610675565b820191906000526020600020905b81548152906001019060200180831161065857829003601f168201915b5050505050815260200160018201805461068e90612cd2565b80601f01602080910402602001604051908101604052809291908181526020018280546106ba90612cd2565b80156107075780601f106106dc57610100808354040283529160200191610707565b820191906000526020600020905b8154815290600101906020018083116106ea57829003601f168201915b5050505050815260200160028201805461072090612cd2565b80601f016020809104026020016040519081016040528092919081815260200182805461074c90612cd2565b80156107995780601f1061076e57610100808354040283529160200191610799565b820191906000526020600020905b81548152906001019060200180831161077c57829003601f168201915b505050505081526020016003820180546107b290612cd2565b80601f01602080910402602001604051908101604052809291908181526020018280546107de90612cd2565b801561082b5780601f106108005761010080835404028352916020019161082b565b820191906000526020600020905b81548152906001019060200180831161080e57829003601f168201915b505050505081525050905061083f826112b5565b6040805180820190915260048152636e616d6560e01b6020820152825191935061086b918491906112cb565b91506108a96040518060400160405280600b81526020016a3232b9b1b934b83a34b7b760a91b8152508260200151846112cb9092919063ffffffff16565b6040805180820182526005815264696d61676560d81b6020820152908301519193506108d7918491906112cb565b91506109176040518060400160405280600d81526020016c185b9a5b585d1a5bdb97dd5c9b609a1b8152508260600151846112cb9092919063ffffffff16565b915061092282611365565b9150610931826020015161137b565b6040516020016109419190612d06565b60405160208183030381529060405292505050919050565b610964335b826114cd565b6109805760405162461bcd60e51b815260040161052590612d4b565b6105c683838361152c565b6000908152600b602052604090206001015490565b6109a98261098b565b6109b28161168b565b6105c68383611695565b60006109c783610c70565b8210610a295760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610525565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610ac25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610525565b610acc828261171b565b5050565b60008051602061364d833981519152610ae88161168b565b610af0611782565b50565b6105c683838360405180602001604052806000815250610d5b565b610b173361095e565b610b335760405162461bcd60e51b815260040161052590612d4b565b610af0816117ce565b6000610b4760085490565b8210610baa5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610525565b60088281548110610bbd57610bbd612d98565b90600052602060002001549050919050565b600080610bdb8361185f565b90506001600160a01b0381166103f25760405162461bcd60e51b815260040161052590612dae565b336000610c0f600c5490565b9050610c1f600c80546001019055565b610c29828261187a565b6000818152600e602052604090208390610c438282612f49565b9050506001610c5183610c70565b11156105c6576040516352ff2fd960e11b815260040160405180910390fd5b60006001600160a01b038216610cda5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610525565b506001600160a01b031660009081526003602052604090205490565b60008051602061364d833981519152610d0e8161168b565b610af0611894565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461040790612cd2565b610acc3383836118d1565b610d6533836114cd565b610d815760405162461bcd60e51b815260040161052590612d4b565b610d8d8484848461199b565b50505050565b6060610d9e82611222565b6000610db560408051602081019091526000815290565b90506000815111610dd55760405180602001604052806000815250610e00565b80610ddf846119ce565b604051602001610df092919061305f565b6040516020818303038152906040525b9392505050565b610e1f60008051602061366d83398151915233610d16565b158015610e3d575033610e3182610bcf565b6001600160a01b031614155b15610e5b57604051638b5701f760e01b815260040160405180910390fd5b6000818152600e60205260408082209051909190600d908290610e7f90859061308e565b604080519182900390912082526020820192909252016000908120805460ff191692151592909217909155600d90610eb78580612de0565b604051610ec5929190613104565b604080519182900390912082526020820192909252016000205460ff1615610f0057604051630d706ecd60e21b815260040160405180910390fd5b6000828152600e602052604090208390610f1a8282612f49565b5050505050565b610f2a8261098b565b610f338161168b565b6105c6838361171b565b610f686040518060800160405280606081526020016060815260200160608152602001606081525090565b6000828152600e602052604090819020815160808101909252805482908290610f9090612cd2565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbc90612cd2565b80156110095780601f10610fde57610100808354040283529160200191611009565b820191906000526020600020905b815481529060010190602001808311610fec57829003601f168201915b5050505050815260200160018201805461102290612cd2565b80601f016020809104026020016040519081016040528092919081815260200182805461104e90612cd2565b801561109b5780601f106110705761010080835404028352916020019161109b565b820191906000526020600020905b81548152906001019060200180831161107e57829003601f168201915b505050505081526020016002820180546110b490612cd2565b80601f01602080910402602001604051908101604052809291908181526020018280546110e090612cd2565b801561112d5780601f106111025761010080835404028352916020019161112d565b820191906000526020600020905b81548152906001019060200180831161111057829003601f168201915b5050505050815260200160038201805461114690612cd2565b80601f016020809104026020016040519081016040528092919081815260200182805461117290612cd2565b80156111bf5780601f10611194576101008083540402835291602001916111bf565b820191906000526020600020905b8154815290600101906020018083116111a257829003601f168201915b5050505050815250509050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b03198216637965db0b60e01b14806103f257506103f282611a60565b61122b81611a85565b610af05760405162461bcd60e51b815260040161052590612dae565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061127c82610bcf565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6112bd6128c7565b6103f282607b60f81b611aa2565b6112d36128c7565b60006112de83611b36565b90506000856000015112156113245760208086015160405161130a92600b60fa1b918891869101613114565b60408051601f198184030181529190526020860152611351565b60208086015160405161133b928791859101613190565b60408051601f1981840301815291905260208601525b61135a85611f93565b855250929392505050565b61136d6128c7565b6103f282607d60f81b611f9d565b6060815160000361139a57505060408051602081019091526000815290565b600060405180606001604052806040815260200161360d60409139905060006003845160026113c99190613212565b6113d39190613225565b6113de906004613247565b6001600160401b038111156113f5576113f5612af5565b6040519080825280601f01601f19166020018201604052801561141f576020820181803683370190505b509050600182016020820185865187015b8082101561148b576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250611430565b50506003865106600181146114a757600281146114ba576114c2565b603d6001830353603d60028303536114c2565b603d60018303535b509195945050505050565b6000806114d983610bcf565b9050806001600160a01b0316846001600160a01b03161480611500575061150081856111cf565b806115245750836001600160a01b03166115198461048a565b6001600160a01b0316145b949350505050565b826001600160a01b031661153f82610bcf565b6001600160a01b0316146115655760405162461bcd60e51b81526004016105259061325e565b6001600160a01b0382166115c75760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610525565b6115d48383836001611ffc565b826001600160a01b03166115e782610bcf565b6001600160a01b03161461160d5760405162461bcd60e51b81526004016105259061325e565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b03878116808652600385528386208054600019019055908716808652838620805460010190558686526002909452828520805490921684179091559051849360008051602061368d83398151915291a4505050565b610af08133612010565b61169f8282610d16565b610acc576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116d73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6117258282610d16565b15610acc576000828152600b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61178a612069565b600a805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516117c49190612990565b60405180910390a1565b60006117d982610bcf565b90506117e9816000846001611ffc565b6117f282610bcf565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b03851680855260038452828520805460001901905587855260029093528184208054909116905551929350849260008051602061368d833981519152908390a45050565b6000908152600260205260409020546001600160a01b031690565b610acc8282604051806020016040528060008152506120b4565b61189c6120e7565b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117b73390565b816001600160a01b0316836001600160a01b03160361192e5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610525565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6119a684848461152c565b6119b28484848461212d565b610d8d5760405162461bcd60e51b8152600401610525906132a3565b606060006119db8361222e565b60010190506000816001600160401b038111156119fa576119fa612af5565b6040519080825280601f01601f191660200182016040528015611a24576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611a2e57509392505050565b60006001600160e01b0319821663780e9d6360e01b14806103f257506103f282612304565b600080611a918361185f565b6001600160a01b0316141592915050565b611aaa6128c7565b825160001315611ae957602080840151604051611acf92600b60fa1b918691016132f5565b60408051601f198184030181529190526020840152611b14565b602080840151604051611afe92859101613328565b60408051601f1981840301815291905260208401525b82516001600160ff1b031680845283611b2c82613357565b9052509192915050565b6060816000805b8251811015611d10578251601760fa1b90849083908110611b6057611b60612d98565b01602001516001600160f81b03191603611b7d5760019150611d10565b8251601160f91b90849083908110611b9757611b97612d98565b01602001516001600160f81b03191603611bb45760019150611d10565b8251602f60f81b90849083908110611bce57611bce612d98565b01602001516001600160f81b03191603611beb5760019150611d10565b8251600960f81b90849083908110611c0557611c05612d98565b01602001516001600160f81b03191603611c225760019150611d10565b8251600360fa1b90849083908110611c3c57611c3c612d98565b01602001516001600160f81b03191603611c595760019150611d10565b8251600560f91b90849083908110611c7357611c73612d98565b01602001516001600160f81b03191603611c905760019150611d10565b8251600d60f81b90849083908110611caa57611caa612d98565b01602001516001600160f81b03191603611cc75760019150611d10565b8251600160fb1b90849083908110611ce157611ce1612d98565b01602001516001600160f81b03191603611cfe5760019150611d10565b80611d0881613376565b915050611b3d565b5080611d1e57509192915050565b60005b8251811015611f8b578251601760fa1b90849083908110611d4457611d44612d98565b01602001516001600160f81b03191603611d7f5783604051602001611d699190613388565b6040516020818303038152906040529350611f79565b8251601160f91b90849083908110611d9957611d99612d98565b01602001516001600160f81b03191603611dbe5783604051602001611d6991906133ae565b8251602f60f81b90849083908110611dd857611dd8612d98565b01602001516001600160f81b03191603611dfd5783604051602001611d6991906133d4565b8251600960f81b90849083908110611e1757611e17612d98565b01602001516001600160f81b03191603611e3c5783604051602001611d6991906133fa565b8251600360fa1b90849083908110611e5657611e56612d98565b01602001516001600160f81b03191603611e7b5783604051602001611d699190613420565b8251600560f91b90849083908110611e9557611e95612d98565b01602001516001600160f81b03191603611eba5783604051602001611d699190613446565b8251600d60f81b90849083908110611ed457611ed4612d98565b01602001516001600160f81b03191603611ef95783604051602001611d69919061346c565b8251600160fb1b90849083908110611f1357611f13612d98565b01602001516001600160f81b03191603611f385783604051602001611d699190613492565b83838281518110611f4b57611f4b612d98565b602001015160f81c60f81b604051602001611f67929190613328565b60405160208183030381529060405293505b80611f8381613376565b915050611d21565b505050919050565b51600160ff1b1790565b611fa56128c7565b602080840151604051611fba92859101613328565b60408051601f198184030181529190526020840152611fd883611f93565b8084526001600160ff1b031615611ff557825183611b2c826134b8565b5090919050565b6120046120e7565b610d8d84848484612354565b61201a8282610d16565b610acc5761202781612481565b612032836020612493565b6040516020016120439291906134d5565b60408051601f198184030181529082905262461bcd60e51b825261052591600401612964565b600a5460ff166120b25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610525565b565b6120be838361262e565b6120cb600084848461212d565b6105c65760405162461bcd60e51b8152600401610525906132a3565b600a5460ff16156120b25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610525565b60006001600160a01b0384163b1561222357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612171903390899088908890600401613544565b6020604051808303816000875af19250505080156121ac575060408051601f3d908101601f191682019092526121a991810190613581565b60015b612209573d8080156121da576040519150601f19603f3d011682016040523d82523d6000602084013e6121df565b606091505b5080516000036122015760405162461bcd60e51b8152600401610525906132a3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611524565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061226d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310612297576904ee2d6d415b85acef8160201b830492506020015b662386f26fc1000083106122b557662386f26fc10000830492506010015b6305f5e10083106122cd576305f5e100830492506008015b61271083106122e157612710830492506004015b606483106122f3576064830492506002015b600a83106103f25760010192915050565b60006001600160e01b031982166380ac58cd60e01b148061233557506001600160e01b03198216635b5e139f60e01b145b806103f257506301ffc9a760e01b6001600160e01b03198316146103f2565b60018111156123c35760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610525565b816001600160a01b03851661241f5761241a81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612442565b836001600160a01b0316856001600160a01b031614612442576124428582612737565b6001600160a01b03841661245e57612459816127d4565b610f1a565b846001600160a01b0316846001600160a01b031614610f1a57610f1a8482612883565b60606103f26001600160a01b03831660145b606060006124a2836002613247565b6124ad906002613212565b6001600160401b038111156124c4576124c4612af5565b6040519080825280601f01601f1916602001820160405280156124ee576020820181803683370190505b509050600360fc1b8160008151811061250957612509612d98565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061253857612538612d98565b60200101906001600160f81b031916908160001a905350600061255c846002613247565b612567906001613212565b90505b60018111156125df576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061259b5761259b612d98565b1a60f81b8282815181106125b1576125b1612d98565b60200101906001600160f81b031916908160001a90535060049490941c936125d88161359e565b905061256a565b508315610e005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610525565b6001600160a01b0382166126845760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610525565b61268d81611a85565b156126aa5760405162461bcd60e51b8152600401610525906135ad565b6126b8600083836001611ffc565b6126c181611a85565b156126de5760405162461bcd60e51b8152600401610525906135ad565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b03191684179055518392919060008051602061368d833981519152908290a45050565b6000600161274484610c70565b61274e91906135e3565b6000838152600760205260409020549091508082146127a1576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906127e6906001906135e3565b6000838152600960205260408120546008805493945090928490811061280e5761280e612d98565b90600052602060002001549050806008838154811061282f5761282f612d98565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612867576128676135f6565b6001900381819060005260206000200160009055905550505050565b600061288e83610c70565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604051806040016040528060008152602001606081525090565b6001600160e01b031981168114610af057600080fd5b60006020828403121561290957600080fd5b8135610e00816128e1565b60005b8381101561292f578181015183820152602001612917565b50506000910152565b60008151808452612950816020860160208601612914565b601f01601f19169290920160200192915050565b602081526000610e006020830184612938565b60006020828403121561298957600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146129bb57600080fd5b919050565b600080604083850312156129d357600080fd5b6129dc836129a4565b946020939093013593505050565b6000806000606084860312156129ff57600080fd5b612a08846129a4565b9250612a16602085016129a4565b9150604084013590509250925092565b60008060408385031215612a3957600080fd5b82359150612a49602084016129a4565b90509250929050565b600060808284031215612a6457600080fd5b50919050565b600060208284031215612a7c57600080fd5b81356001600160401b03811115612a9257600080fd5b61152484828501612a52565b600060208284031215612ab057600080fd5b610e00826129a4565b60008060408385031215612acc57600080fd5b612ad5836129a4565b915060208301358015158114612aea57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612b2157600080fd5b612b2a856129a4565b9350612b38602086016129a4565b92506040850135915060608501356001600160401b0380821115612b5b57600080fd5b818701915087601f830112612b6f57600080fd5b813581811115612b8157612b81612af5565b604051601f8201601f19908116603f01168101908382118183101715612ba957612ba9612af5565b816040528281528a6020848701011115612bc257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612bf957600080fd5b82356001600160401b03811115612c0f57600080fd5b612c1b85828601612a52565b95602094909401359450505050565b602081526000825160806020840152612c4660a0840182612938565b90506020840151601f1980858403016040860152612c648383612938565b92506040860151915080858403016060860152612c818383612938565b9250606086015191508085840301608086015250612c9f8282612938565b95945050505050565b60008060408385031215612cbb57600080fd5b612cc4836129a4565b9150612a49602084016129a4565b600181811c90821680612ce657607f821691505b602082108103612a6457634e487b7160e01b600052602260045260246000fd5b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251612d3e81601d850160208701612914565b91909101601d0192915050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b6000808335601e19843603018112612df757600080fd5b8301803591506001600160401b03821115612e1157600080fd5b602001915036819003821315612e2657600080fd5b9250929050565b601f8211156105c657600081815260208120601f850160051c81016020861015612e545750805b601f850160051c820191505b81811015612e7357828155600101612e60565b505050505050565b600019600383901b1c191660019190911b1790565b6001600160401b03831115612ea757612ea7612af5565b612ebb83612eb58354612cd2565b83612e2d565b6000601f841160018114612ee95760008515612ed75750838201355b612ee18682612e7b565b845550610f1a565b600083815260209020601f19861690835b82811015612f1a5786850135825560209485019460019092019101612efa565b5086821015612f375760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b612f538283612de0565b6001600160401b03811115612f6a57612f6a612af5565b612f7e81612f788554612cd2565b85612e2d565b6000601f821160018114612fac5760008315612f9a5750838201355b612fa48482612e7b565b865550613006565b600085815260209020601f19841690835b82811015612fdd5786850135825560209485019460019092019101612fbd565b5084821015612ffa5760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506130176020830183612de0565b613025818360018601612e90565b50506130346040830183612de0565b613042818360028601612e90565b50506130516060830183612de0565b610d8d818360038601612e90565b60008351613071818460208801612914565b835190830190613085818360208801612914565b01949350505050565b600080835461309c81612cd2565b600182811680156130b457600181146130c9576130f8565b60ff19841687528215158302870194506130f8565b8760005260208060002060005b858110156130ef5781548a8201529084019082016130d6565b50505082870194505b50929695505050505050565b8183823760009101908152919050565b60008551613126818460208a01612914565b6001600160f81b03198616908301908152601160f91b600182018190528551613156816002850160208a01612914565b63111d101160e11b60029390910192830152845161317b816006850160208901612914565b60069201918201526007019695505050505050565b600084516131a2818460208901612914565b601160f91b90830181815285519091906131c3816001850160208a01612914565b63111d101160e11b6001939091019283015284516131e8816005850160208901612914565b600592019182015260060195945050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103f2576103f26131fc565b60008261324257634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176103f2576103f26131fc565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008451613307818460208901612914565b6001600160f81b031994851692019182525091166001820152600201919050565b6000835161333a818460208801612914565b6001600160f81b0319939093169190920190815260010192915050565b60006001600160ff1b01820161336f5761336f6131fc565b5060010190565b60006001820161336f5761336f6131fc565b6000825161339a818460208701612914565b61171760f21b920191825250600201919050565b600082516133c0818460208701612914565b612e1160f11b920191825250600201919050565b600082516133e6818460208701612914565b615c2f60f01b920191825250600201919050565b6000825161340c818460208701612914565b61171d60f21b920191825250600201919050565b60008251613432818460208701612914565b612e3360f11b920191825250600201919050565b60008251613458818460208701612914565b612e3760f11b920191825250600201919050565b6000825161347e818460208701612914565b612e3960f11b920191825250600201919050565b600082516134a4818460208701612914565b612e3160f11b920191825250600201919050565b6000600160ff1b82016134cd576134cd6131fc565b506000190190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351613507816017850160208801612914565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613538816028840160208801612914565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061357790830184612938565b9695505050505050565b60006020828403121561359357600080fd5b8151610e00816128e1565b6000816134cd576134cd6131fc565b6020808252601c908201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b604082015260600190565b818103818111156103f2576103f26131fc565b634e487b7160e01b600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a258da3f8ea806f7e7cbb0d1e678511a215a1c0f7dd1adbb264142f4dd7eddf664736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101805760003560e01c806301ffc9a71461018557806306fdde03146101ad578063081812fc146101c2578063095ea7b3146101e25780630e89341c146101f757806318160ddd1461020a57806323b872dd1461021c578063248a9ca31461022f5780632f2ff15d146102425780632f745c591461025557806336568abe146102685780633f4ba83a1461027b57806342842e0e1461028357806342966c68146102965780634f6ccce7146102a95780635c975abb146102bc5780636352211e146102c75780636a2e60db146102da57806370a08231146102ed5780638456cb591461030057806391d148541461030857806395d89b411461031b578063a217fddf14610323578063a22cb4651461032b578063b88d4fde1461033e578063c87b56dd14610351578063d2e21bab14610364578063d539139314610377578063d547741f1461038c578063e3684e391461039f578063e63ab1e9146103bf578063e985e9c5146103d4575b600080fd5b6101986101933660046128f7565b6103e7565b60405190151581526020015b60405180910390f35b6101b56103f8565b6040516101a49190612964565b6101d56101d0366004612977565b61048a565b6040516101a49190612990565b6101f56101f03660046129c0565b6104b1565b005b6101b5610205366004612977565b6105cb565b6008545b6040519081526020016101a4565b6101f561022a3660046129ea565b610959565b61020e61023d366004612977565b61098b565b6101f5610250366004612a26565b6109a0565b61020e6102633660046129c0565b6109bc565b6101f5610276366004612a26565b610a52565b6101f5610ad0565b6101f56102913660046129ea565b610af3565b6101f56102a4366004612977565b610b0e565b61020e6102b7366004612977565b610b3c565b600a5460ff16610198565b6101d56102d5366004612977565b610bcf565b6101f56102e8366004612a6a565b610c03565b61020e6102fb366004612a9e565b610c70565b6101f5610cf6565b610198610316366004612a26565b610d16565b6101b5610d41565b61020e600081565b6101f5610339366004612ab9565b610d50565b6101f561034c366004612b0b565b610d5b565b6101b561035f366004612977565b610d93565b6101f5610372366004612be6565b610e07565b61020e60008051602061366d83398151915281565b6101f561039a366004612a26565b610f21565b6103b26103ad366004612977565b610f3d565b6040516101a49190612c2a565b61020e60008051602061364d83398151915281565b6101986103e2366004612ca8565b6111cf565b60006103f2826111fd565b92915050565b60606000805461040790612cd2565b80601f016020809104026020016040519081016040528092919081815260200182805461043390612cd2565b80156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b5050505050905090565b600061049582611222565b506000908152600460205260409020546001600160a01b031690565b60006104bc82610bcf565b9050806001600160a01b0316836001600160a01b03160361052e5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061054a575061054a81336111cf565b6105bc5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610525565b6105c68383611247565b505050565b60606105d56128c7565b6000838152600e60205260408082208151608081019092528054829082906105fc90612cd2565b80601f016020809104026020016040519081016040528092919081815260200182805461062890612cd2565b80156106755780601f1061064a57610100808354040283529160200191610675565b820191906000526020600020905b81548152906001019060200180831161065857829003601f168201915b5050505050815260200160018201805461068e90612cd2565b80601f01602080910402602001604051908101604052809291908181526020018280546106ba90612cd2565b80156107075780601f106106dc57610100808354040283529160200191610707565b820191906000526020600020905b8154815290600101906020018083116106ea57829003601f168201915b5050505050815260200160028201805461072090612cd2565b80601f016020809104026020016040519081016040528092919081815260200182805461074c90612cd2565b80156107995780601f1061076e57610100808354040283529160200191610799565b820191906000526020600020905b81548152906001019060200180831161077c57829003601f168201915b505050505081526020016003820180546107b290612cd2565b80601f01602080910402602001604051908101604052809291908181526020018280546107de90612cd2565b801561082b5780601f106108005761010080835404028352916020019161082b565b820191906000526020600020905b81548152906001019060200180831161080e57829003601f168201915b505050505081525050905061083f826112b5565b6040805180820190915260048152636e616d6560e01b6020820152825191935061086b918491906112cb565b91506108a96040518060400160405280600b81526020016a3232b9b1b934b83a34b7b760a91b8152508260200151846112cb9092919063ffffffff16565b6040805180820182526005815264696d61676560d81b6020820152908301519193506108d7918491906112cb565b91506109176040518060400160405280600d81526020016c185b9a5b585d1a5bdb97dd5c9b609a1b8152508260600151846112cb9092919063ffffffff16565b915061092282611365565b9150610931826020015161137b565b6040516020016109419190612d06565b60405160208183030381529060405292505050919050565b610964335b826114cd565b6109805760405162461bcd60e51b815260040161052590612d4b565b6105c683838361152c565b6000908152600b602052604090206001015490565b6109a98261098b565b6109b28161168b565b6105c68383611695565b60006109c783610c70565b8210610a295760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610525565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610ac25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610525565b610acc828261171b565b5050565b60008051602061364d833981519152610ae88161168b565b610af0611782565b50565b6105c683838360405180602001604052806000815250610d5b565b610b173361095e565b610b335760405162461bcd60e51b815260040161052590612d4b565b610af0816117ce565b6000610b4760085490565b8210610baa5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610525565b60088281548110610bbd57610bbd612d98565b90600052602060002001549050919050565b600080610bdb8361185f565b90506001600160a01b0381166103f25760405162461bcd60e51b815260040161052590612dae565b336000610c0f600c5490565b9050610c1f600c80546001019055565b610c29828261187a565b6000818152600e602052604090208390610c438282612f49565b9050506001610c5183610c70565b11156105c6576040516352ff2fd960e11b815260040160405180910390fd5b60006001600160a01b038216610cda5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610525565b506001600160a01b031660009081526003602052604090205490565b60008051602061364d833981519152610d0e8161168b565b610af0611894565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60606001805461040790612cd2565b610acc3383836118d1565b610d6533836114cd565b610d815760405162461bcd60e51b815260040161052590612d4b565b610d8d8484848461199b565b50505050565b6060610d9e82611222565b6000610db560408051602081019091526000815290565b90506000815111610dd55760405180602001604052806000815250610e00565b80610ddf846119ce565b604051602001610df092919061305f565b6040516020818303038152906040525b9392505050565b610e1f60008051602061366d83398151915233610d16565b158015610e3d575033610e3182610bcf565b6001600160a01b031614155b15610e5b57604051638b5701f760e01b815260040160405180910390fd5b6000818152600e60205260408082209051909190600d908290610e7f90859061308e565b604080519182900390912082526020820192909252016000908120805460ff191692151592909217909155600d90610eb78580612de0565b604051610ec5929190613104565b604080519182900390912082526020820192909252016000205460ff1615610f0057604051630d706ecd60e21b815260040160405180910390fd5b6000828152600e602052604090208390610f1a8282612f49565b5050505050565b610f2a8261098b565b610f338161168b565b6105c6838361171b565b610f686040518060800160405280606081526020016060815260200160608152602001606081525090565b6000828152600e602052604090819020815160808101909252805482908290610f9090612cd2565b80601f0160208091040260200160405190810160405280929190818152602001828054610fbc90612cd2565b80156110095780601f10610fde57610100808354040283529160200191611009565b820191906000526020600020905b815481529060010190602001808311610fec57829003601f168201915b5050505050815260200160018201805461102290612cd2565b80601f016020809104026020016040519081016040528092919081815260200182805461104e90612cd2565b801561109b5780601f106110705761010080835404028352916020019161109b565b820191906000526020600020905b81548152906001019060200180831161107e57829003601f168201915b505050505081526020016002820180546110b490612cd2565b80601f01602080910402602001604051908101604052809291908181526020018280546110e090612cd2565b801561112d5780601f106111025761010080835404028352916020019161112d565b820191906000526020600020905b81548152906001019060200180831161111057829003601f168201915b5050505050815260200160038201805461114690612cd2565b80601f016020809104026020016040519081016040528092919081815260200182805461117290612cd2565b80156111bf5780601f10611194576101008083540402835291602001916111bf565b820191906000526020600020905b8154815290600101906020018083116111a257829003601f168201915b5050505050815250509050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b03198216637965db0b60e01b14806103f257506103f282611a60565b61122b81611a85565b610af05760405162461bcd60e51b815260040161052590612dae565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061127c82610bcf565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6112bd6128c7565b6103f282607b60f81b611aa2565b6112d36128c7565b60006112de83611b36565b90506000856000015112156113245760208086015160405161130a92600b60fa1b918891869101613114565b60408051601f198184030181529190526020860152611351565b60208086015160405161133b928791859101613190565b60408051601f1981840301815291905260208601525b61135a85611f93565b855250929392505050565b61136d6128c7565b6103f282607d60f81b611f9d565b6060815160000361139a57505060408051602081019091526000815290565b600060405180606001604052806040815260200161360d60409139905060006003845160026113c99190613212565b6113d39190613225565b6113de906004613247565b6001600160401b038111156113f5576113f5612af5565b6040519080825280601f01601f19166020018201604052801561141f576020820181803683370190505b509050600182016020820185865187015b8082101561148b576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250611430565b50506003865106600181146114a757600281146114ba576114c2565b603d6001830353603d60028303536114c2565b603d60018303535b509195945050505050565b6000806114d983610bcf565b9050806001600160a01b0316846001600160a01b03161480611500575061150081856111cf565b806115245750836001600160a01b03166115198461048a565b6001600160a01b0316145b949350505050565b826001600160a01b031661153f82610bcf565b6001600160a01b0316146115655760405162461bcd60e51b81526004016105259061325e565b6001600160a01b0382166115c75760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610525565b6115d48383836001611ffc565b826001600160a01b03166115e782610bcf565b6001600160a01b03161461160d5760405162461bcd60e51b81526004016105259061325e565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b03878116808652600385528386208054600019019055908716808652838620805460010190558686526002909452828520805490921684179091559051849360008051602061368d83398151915291a4505050565b610af08133612010565b61169f8282610d16565b610acc576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff191660011790556116d73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6117258282610d16565b15610acc576000828152600b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61178a612069565b600a805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516117c49190612990565b60405180910390a1565b60006117d982610bcf565b90506117e9816000846001611ffc565b6117f282610bcf565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b03851680855260038452828520805460001901905587855260029093528184208054909116905551929350849260008051602061368d833981519152908390a45050565b6000908152600260205260409020546001600160a01b031690565b610acc8282604051806020016040528060008152506120b4565b61189c6120e7565b600a805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117b73390565b816001600160a01b0316836001600160a01b03160361192e5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b6044820152606401610525565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6119a684848461152c565b6119b28484848461212d565b610d8d5760405162461bcd60e51b8152600401610525906132a3565b606060006119db8361222e565b60010190506000816001600160401b038111156119fa576119fa612af5565b6040519080825280601f01601f191660200182016040528015611a24576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611a2e57509392505050565b60006001600160e01b0319821663780e9d6360e01b14806103f257506103f282612304565b600080611a918361185f565b6001600160a01b0316141592915050565b611aaa6128c7565b825160001315611ae957602080840151604051611acf92600b60fa1b918691016132f5565b60408051601f198184030181529190526020840152611b14565b602080840151604051611afe92859101613328565b60408051601f1981840301815291905260208401525b82516001600160ff1b031680845283611b2c82613357565b9052509192915050565b6060816000805b8251811015611d10578251601760fa1b90849083908110611b6057611b60612d98565b01602001516001600160f81b03191603611b7d5760019150611d10565b8251601160f91b90849083908110611b9757611b97612d98565b01602001516001600160f81b03191603611bb45760019150611d10565b8251602f60f81b90849083908110611bce57611bce612d98565b01602001516001600160f81b03191603611beb5760019150611d10565b8251600960f81b90849083908110611c0557611c05612d98565b01602001516001600160f81b03191603611c225760019150611d10565b8251600360fa1b90849083908110611c3c57611c3c612d98565b01602001516001600160f81b03191603611c595760019150611d10565b8251600560f91b90849083908110611c7357611c73612d98565b01602001516001600160f81b03191603611c905760019150611d10565b8251600d60f81b90849083908110611caa57611caa612d98565b01602001516001600160f81b03191603611cc75760019150611d10565b8251600160fb1b90849083908110611ce157611ce1612d98565b01602001516001600160f81b03191603611cfe5760019150611d10565b80611d0881613376565b915050611b3d565b5080611d1e57509192915050565b60005b8251811015611f8b578251601760fa1b90849083908110611d4457611d44612d98565b01602001516001600160f81b03191603611d7f5783604051602001611d699190613388565b6040516020818303038152906040529350611f79565b8251601160f91b90849083908110611d9957611d99612d98565b01602001516001600160f81b03191603611dbe5783604051602001611d6991906133ae565b8251602f60f81b90849083908110611dd857611dd8612d98565b01602001516001600160f81b03191603611dfd5783604051602001611d6991906133d4565b8251600960f81b90849083908110611e1757611e17612d98565b01602001516001600160f81b03191603611e3c5783604051602001611d6991906133fa565b8251600360fa1b90849083908110611e5657611e56612d98565b01602001516001600160f81b03191603611e7b5783604051602001611d699190613420565b8251600560f91b90849083908110611e9557611e95612d98565b01602001516001600160f81b03191603611eba5783604051602001611d699190613446565b8251600d60f81b90849083908110611ed457611ed4612d98565b01602001516001600160f81b03191603611ef95783604051602001611d69919061346c565b8251600160fb1b90849083908110611f1357611f13612d98565b01602001516001600160f81b03191603611f385783604051602001611d699190613492565b83838281518110611f4b57611f4b612d98565b602001015160f81c60f81b604051602001611f67929190613328565b60405160208183030381529060405293505b80611f8381613376565b915050611d21565b505050919050565b51600160ff1b1790565b611fa56128c7565b602080840151604051611fba92859101613328565b60408051601f198184030181529190526020840152611fd883611f93565b8084526001600160ff1b031615611ff557825183611b2c826134b8565b5090919050565b6120046120e7565b610d8d84848484612354565b61201a8282610d16565b610acc5761202781612481565b612032836020612493565b6040516020016120439291906134d5565b60408051601f198184030181529082905262461bcd60e51b825261052591600401612964565b600a5460ff166120b25760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610525565b565b6120be838361262e565b6120cb600084848461212d565b6105c65760405162461bcd60e51b8152600401610525906132a3565b600a5460ff16156120b25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610525565b60006001600160a01b0384163b1561222357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612171903390899088908890600401613544565b6020604051808303816000875af19250505080156121ac575060408051601f3d908101601f191682019092526121a991810190613581565b60015b612209573d8080156121da576040519150601f19603f3d011682016040523d82523d6000602084013e6121df565b606091505b5080516000036122015760405162461bcd60e51b8152600401610525906132a3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611524565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061226d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310612297576904ee2d6d415b85acef8160201b830492506020015b662386f26fc1000083106122b557662386f26fc10000830492506010015b6305f5e10083106122cd576305f5e100830492506008015b61271083106122e157612710830492506004015b606483106122f3576064830492506002015b600a83106103f25760010192915050565b60006001600160e01b031982166380ac58cd60e01b148061233557506001600160e01b03198216635b5e139f60e01b145b806103f257506301ffc9a760e01b6001600160e01b03198316146103f2565b60018111156123c35760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610525565b816001600160a01b03851661241f5761241a81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612442565b836001600160a01b0316856001600160a01b031614612442576124428582612737565b6001600160a01b03841661245e57612459816127d4565b610f1a565b846001600160a01b0316846001600160a01b031614610f1a57610f1a8482612883565b60606103f26001600160a01b03831660145b606060006124a2836002613247565b6124ad906002613212565b6001600160401b038111156124c4576124c4612af5565b6040519080825280601f01601f1916602001820160405280156124ee576020820181803683370190505b509050600360fc1b8160008151811061250957612509612d98565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061253857612538612d98565b60200101906001600160f81b031916908160001a905350600061255c846002613247565b612567906001613212565b90505b60018111156125df576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061259b5761259b612d98565b1a60f81b8282815181106125b1576125b1612d98565b60200101906001600160f81b031916908160001a90535060049490941c936125d88161359e565b905061256a565b508315610e005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610525565b6001600160a01b0382166126845760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610525565b61268d81611a85565b156126aa5760405162461bcd60e51b8152600401610525906135ad565b6126b8600083836001611ffc565b6126c181611a85565b156126de5760405162461bcd60e51b8152600401610525906135ad565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b03191684179055518392919060008051602061368d833981519152908290a45050565b6000600161274484610c70565b61274e91906135e3565b6000838152600760205260409020549091508082146127a1576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906127e6906001906135e3565b6000838152600960205260408120546008805493945090928490811061280e5761280e612d98565b90600052602060002001549050806008838154811061282f5761282f612d98565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612867576128676135f6565b6001900381819060005260206000200160009055905550505050565b600061288e83610c70565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604051806040016040528060008152602001606081525090565b6001600160e01b031981168114610af057600080fd5b60006020828403121561290957600080fd5b8135610e00816128e1565b60005b8381101561292f578181015183820152602001612917565b50506000910152565b60008151808452612950816020860160208601612914565b601f01601f19169290920160200192915050565b602081526000610e006020830184612938565b60006020828403121561298957600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146129bb57600080fd5b919050565b600080604083850312156129d357600080fd5b6129dc836129a4565b946020939093013593505050565b6000806000606084860312156129ff57600080fd5b612a08846129a4565b9250612a16602085016129a4565b9150604084013590509250925092565b60008060408385031215612a3957600080fd5b82359150612a49602084016129a4565b90509250929050565b600060808284031215612a6457600080fd5b50919050565b600060208284031215612a7c57600080fd5b81356001600160401b03811115612a9257600080fd5b61152484828501612a52565b600060208284031215612ab057600080fd5b610e00826129a4565b60008060408385031215612acc57600080fd5b612ad5836129a4565b915060208301358015158114612aea57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612b2157600080fd5b612b2a856129a4565b9350612b38602086016129a4565b92506040850135915060608501356001600160401b0380821115612b5b57600080fd5b818701915087601f830112612b6f57600080fd5b813581811115612b8157612b81612af5565b604051601f8201601f19908116603f01168101908382118183101715612ba957612ba9612af5565b816040528281528a6020848701011115612bc257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612bf957600080fd5b82356001600160401b03811115612c0f57600080fd5b612c1b85828601612a52565b95602094909401359450505050565b602081526000825160806020840152612c4660a0840182612938565b90506020840151601f1980858403016040860152612c648383612938565b92506040860151915080858403016060860152612c818383612938565b9250606086015191508085840301608086015250612c9f8282612938565b95945050505050565b60008060408385031215612cbb57600080fd5b612cc4836129a4565b9150612a49602084016129a4565b600181811c90821680612ce657607f821691505b602082108103612a6457634e487b7160e01b600052602260045260246000fd5b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251612d3e81601d850160208701612914565b91909101601d0192915050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b6000808335601e19843603018112612df757600080fd5b8301803591506001600160401b03821115612e1157600080fd5b602001915036819003821315612e2657600080fd5b9250929050565b601f8211156105c657600081815260208120601f850160051c81016020861015612e545750805b601f850160051c820191505b81811015612e7357828155600101612e60565b505050505050565b600019600383901b1c191660019190911b1790565b6001600160401b03831115612ea757612ea7612af5565b612ebb83612eb58354612cd2565b83612e2d565b6000601f841160018114612ee95760008515612ed75750838201355b612ee18682612e7b565b845550610f1a565b600083815260209020601f19861690835b82811015612f1a5786850135825560209485019460019092019101612efa565b5086821015612f375760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b612f538283612de0565b6001600160401b03811115612f6a57612f6a612af5565b612f7e81612f788554612cd2565b85612e2d565b6000601f821160018114612fac5760008315612f9a5750838201355b612fa48482612e7b565b865550613006565b600085815260209020601f19841690835b82811015612fdd5786850135825560209485019460019092019101612fbd565b5084821015612ffa5760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506130176020830183612de0565b613025818360018601612e90565b50506130346040830183612de0565b613042818360028601612e90565b50506130516060830183612de0565b610d8d818360038601612e90565b60008351613071818460208801612914565b835190830190613085818360208801612914565b01949350505050565b600080835461309c81612cd2565b600182811680156130b457600181146130c9576130f8565b60ff19841687528215158302870194506130f8565b8760005260208060002060005b858110156130ef5781548a8201529084019082016130d6565b50505082870194505b50929695505050505050565b8183823760009101908152919050565b60008551613126818460208a01612914565b6001600160f81b03198616908301908152601160f91b600182018190528551613156816002850160208a01612914565b63111d101160e11b60029390910192830152845161317b816006850160208901612914565b60069201918201526007019695505050505050565b600084516131a2818460208901612914565b601160f91b90830181815285519091906131c3816001850160208a01612914565b63111d101160e11b6001939091019283015284516131e8816005850160208901612914565b600592019182015260060195945050505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156103f2576103f26131fc565b60008261324257634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176103f2576103f26131fc565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008451613307818460208901612914565b6001600160f81b031994851692019182525091166001820152600201919050565b6000835161333a818460208801612914565b6001600160f81b0319939093169190920190815260010192915050565b60006001600160ff1b01820161336f5761336f6131fc565b5060010190565b60006001820161336f5761336f6131fc565b6000825161339a818460208701612914565b61171760f21b920191825250600201919050565b600082516133c0818460208701612914565b612e1160f11b920191825250600201919050565b600082516133e6818460208701612914565b615c2f60f01b920191825250600201919050565b6000825161340c818460208701612914565b61171d60f21b920191825250600201919050565b60008251613432818460208701612914565b612e3360f11b920191825250600201919050565b60008251613458818460208701612914565b612e3760f11b920191825250600201919050565b6000825161347e818460208701612914565b612e3960f11b920191825250600201919050565b600082516134a4818460208701612914565b612e3160f11b920191825250600201919050565b6000600160ff1b82016134cd576134cd6131fc565b506000190190565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351613507816017850160208801612914565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351613538816028840160208801612914565b01602801949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061357790830184612938565b9695505050505050565b60006020828403121561359357600080fd5b8151610e00816128e1565b6000816134cd576134cd6131fc565b6020808252601c908201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b604082015260600190565b818103818111156103f2576103f26131fc565b634e487b7160e01b600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220a258da3f8ea806f7e7cbb0d1e678511a215a1c0f7dd1adbb264142f4dd7eddf664736f6c63430008120033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 522,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 524,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 528,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 532,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 536,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 542,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1602,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1606,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1609,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1613,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 406,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_paused",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_roles",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3595,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)2404_storage"
      },
      {
        "astId": 3599,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_usedNames",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3604,
        "contract": "contracts/PlayerProfile.sol:PlayerProfile",
        "label": "_metadata",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Metadata)3613_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Metadata)3613_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PlayerProfile.Metadata)",
        "numberOfBytes": "32",
        "value": "t_struct(Metadata)3613_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2404_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2403,
            "contract": "contracts/PlayerProfile.sol:PlayerProfile",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Metadata)3613_storage": {
        "encoding": "inplace",
        "label": "struct PlayerProfile.Metadata",
        "members": [
          {
            "astId": 3606,
            "contract": "contracts/PlayerProfile.sol:PlayerProfile",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3608,
            "contract": "contracts/PlayerProfile.sol:PlayerProfile",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3610,
            "contract": "contracts/PlayerProfile.sol:PlayerProfile",
            "label": "image",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3612,
            "contract": "contracts/PlayerProfile.sol:PlayerProfile",
            "label": "animationUrl",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/PlayerProfile.sol:PlayerProfile",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/PlayerProfile.sol:PlayerProfile",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}