/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type AMMSwapDetailsStruct = {
  swapType: BigNumberish;
  amountIn: BigNumberish;
  amountOut: BigNumberish;
  path: string[];
  to: string;
  deadline: BigNumberish;
};

export type AMMSwapDetailsStructOutput = [
  number,
  BigNumber,
  BigNumber,
  string[],
  string,
  BigNumber
] & {
  swapType: number;
  amountIn: BigNumber;
  amountOut: BigNumber;
  path: string[];
  to: string;
  deadline: BigNumber;
};

export type StableSwapDetailsStruct = {
  stablePool: string;
  tokenIndexFrom: BigNumberish;
  tokenIndexTo: BigNumberish;
  dx: BigNumberish;
  minDy: BigNumberish;
  deadline: BigNumberish;
};

export type StableSwapDetailsStructOutput = [
  string,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  stablePool: string;
  tokenIndexFrom: number;
  tokenIndexTo: number;
  dx: BigNumber;
  minDy: BigNumber;
  deadline: BigNumber;
};

export type SwapDetailsStruct = {
  ammSwaps: AMMSwapDetailsStruct[];
  stableSwaps: StableSwapDetailsStruct[];
  order: BigNumberish[];
};

export type SwapDetailsStructOutput = [
  AMMSwapDetailsStructOutput[],
  StableSwapDetailsStructOutput[],
  number[]
] & {
  ammSwaps: AMMSwapDetailsStructOutput[];
  stableSwaps: StableSwapDetailsStructOutput[];
  order: number[];
};

export interface RubyRouterInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "ammRouter()": FunctionFragment;
    "disableStablePool(address)": FunctionFragment;
    "enableStablePool(address)": FunctionFragment;
    "enabledStablePools(address)": FunctionFragment;
    "initialize(address,address,address,address,uint256)": FunctionFragment;
    "nftAdmin()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAmmRouter(address)": FunctionFragment;
    "setMaxHops(uint256)": FunctionFragment;
    "setNftAdmin(address)": FunctionFragment;
    "swap(((uint8,uint256,uint256,address[],address,uint256)[],(address,uint8,uint8,uint256,uint256,uint256)[],uint8[]))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "changeAdmin"
      | "implementation"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "ammRouter"
      | "disableStablePool"
      | "enableStablePool"
      | "enabledStablePools"
      | "initialize"
      | "nftAdmin"
      | "owner"
      | "renounceOwnership"
      | "setAmmRouter"
      | "setMaxHops"
      | "setNftAdmin"
      | "swap"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "ammRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "disableStablePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableStablePool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enabledStablePools",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nftAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAmmRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxHops",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setNftAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [SwapDetailsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ammRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableStablePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableStablePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enabledStablePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmmRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxHops", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNftAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "AmmRouterSet(address)": EventFragment;
    "MaxHopsSet(uint256)": EventFragment;
    "NftAdminSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StablePoolDisabled(address)": EventFragment;
    "StablePoolEnabled(address)": EventFragment;
    "Swap(address,uint256,uint256,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmmRouterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxHopsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NftAdminSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StablePoolDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StablePoolEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface AmmRouterSetEventObject {
  newAmmRouter: string;
}
export type AmmRouterSetEvent = TypedEvent<[string], AmmRouterSetEventObject>;

export type AmmRouterSetEventFilter = TypedEventFilter<AmmRouterSetEvent>;

export interface MaxHopsSetEventObject {
  maxSwapHops: BigNumber;
}
export type MaxHopsSetEvent = TypedEvent<[BigNumber], MaxHopsSetEventObject>;

export type MaxHopsSetEventFilter = TypedEventFilter<MaxHopsSetEvent>;

export interface NftAdminSetEventObject {
  newNftAdmin: string;
}
export type NftAdminSetEvent = TypedEvent<[string], NftAdminSetEventObject>;

export type NftAdminSetEventFilter = TypedEventFilter<NftAdminSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StablePoolDisabledEventObject {
  stablePool: string;
}
export type StablePoolDisabledEvent = TypedEvent<
  [string],
  StablePoolDisabledEventObject
>;

export type StablePoolDisabledEventFilter =
  TypedEventFilter<StablePoolDisabledEvent>;

export interface StablePoolEnabledEventObject {
  stablePool: string;
}
export type StablePoolEnabledEvent = TypedEvent<
  [string],
  StablePoolEnabledEventObject
>;

export type StablePoolEnabledEventFilter =
  TypedEventFilter<StablePoolEnabledEvent>;

export interface SwapEventObject {
  sender: string;
  amount0In: BigNumber;
  amount1Out: BigNumber;
  token0: string;
  token1: string;
  to: string;
}
export type SwapEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string, string],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface RubyRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RubyRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    implementation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ammRouter(overrides?: CallOverrides): Promise<[string]>;

    disableStablePool(
      stablePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableStablePool(
      stablePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enabledStablePools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _owner: string,
      _ammRouter: string,
      _stablePool: string,
      _nftAdmin: string,
      maxSwapHops_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftAdmin(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAmmRouter(
      newAmmRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxHops(
      maxSwapHops: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftAdmin(
      newNftAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swap(
      swapDetails: SwapDetailsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  implementation(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ammRouter(overrides?: CallOverrides): Promise<string>;

  disableStablePool(
    stablePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableStablePool(
    stablePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enabledStablePools(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  initialize(
    _owner: string,
    _ammRouter: string,
    _stablePool: string,
    _nftAdmin: string,
    maxSwapHops_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftAdmin(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAmmRouter(
    newAmmRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxHops(
    maxSwapHops: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftAdmin(
    newNftAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swap(
    swapDetails: SwapDetailsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    implementation(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ammRouter(overrides?: CallOverrides): Promise<string>;

    disableStablePool(
      stablePool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enableStablePool(
      stablePool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enabledStablePools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _owner: string,
      _ammRouter: string,
      _stablePool: string,
      _nftAdmin: string,
      maxSwapHops_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nftAdmin(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAmmRouter(
      newAmmRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxHops(
      maxSwapHops: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftAdmin(newNftAdmin: string, overrides?: CallOverrides): Promise<void>;

    swap(
      swapDetails: SwapDetailsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "AmmRouterSet(address)"(newAmmRouter?: null): AmmRouterSetEventFilter;
    AmmRouterSet(newAmmRouter?: null): AmmRouterSetEventFilter;

    "MaxHopsSet(uint256)"(maxSwapHops?: null): MaxHopsSetEventFilter;
    MaxHopsSet(maxSwapHops?: null): MaxHopsSetEventFilter;

    "NftAdminSet(address)"(newNftAdmin?: null): NftAdminSetEventFilter;
    NftAdminSet(newNftAdmin?: null): NftAdminSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StablePoolDisabled(address)"(
      stablePool?: null
    ): StablePoolDisabledEventFilter;
    StablePoolDisabled(stablePool?: null): StablePoolDisabledEventFilter;

    "StablePoolEnabled(address)"(
      stablePool?: null
    ): StablePoolEnabledEventFilter;
    StablePoolEnabled(stablePool?: null): StablePoolEnabledEventFilter;

    "Swap(address,uint256,uint256,address,address,address)"(
      sender?: string | null,
      amount0In?: null,
      amount1Out?: null,
      token0?: null,
      token1?: null,
      to?: string | null
    ): SwapEventFilter;
    Swap(
      sender?: string | null,
      amount0In?: null,
      amount1Out?: null,
      token0?: null,
      token1?: null,
      to?: string | null
    ): SwapEventFilter;
  };

  estimateGas: {
    admin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    implementation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ammRouter(overrides?: CallOverrides): Promise<BigNumber>;

    disableStablePool(
      stablePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableStablePool(
      stablePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enabledStablePools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _ammRouter: string,
      _stablePool: string,
      _nftAdmin: string,
      maxSwapHops_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAmmRouter(
      newAmmRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxHops(
      maxSwapHops: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftAdmin(
      newNftAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swap(
      swapDetails: SwapDetailsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    implementation(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ammRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableStablePool(
      stablePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableStablePool(
      stablePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enabledStablePools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _ammRouter: string,
      _stablePool: string,
      _nftAdmin: string,
      maxSwapHops_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAmmRouter(
      newAmmRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxHops(
      maxSwapHops: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftAdmin(
      newNftAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      swapDetails: SwapDetailsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
